//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/xrp_ledger.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCall: ClientCallUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCallBase: ClientCallUnaryBase<Org_Xrpl_Rpc_V1_GetAccountInfoRequest, Org_Xrpl_Rpc_V1_GetAccountInfoResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCall {
  override class var method: String { return "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetAccountInfo" }
}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCall: ClientCallUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCallBase: ClientCallUnaryBase<Org_Xrpl_Rpc_V1_GetFeeRequest, Org_Xrpl_Rpc_V1_GetFeeResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCall {
  override class var method: String { return "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetFee" }
}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCall: ClientCallUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCallBase: ClientCallUnaryBase<Org_Xrpl_Rpc_V1_SubmitTransactionRequest, Org_Xrpl_Rpc_V1_SubmitTransactionResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCall {
  override class var method: String { return "/org.xrpl.rpc.v1.XRPLedgerAPIService/SubmitTransaction" }
}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCall: ClientCallUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCallBase: ClientCallUnaryBase<Org_Xrpl_Rpc_V1_GetTransactionRequest, Org_Xrpl_Rpc_V1_GetTransactionResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCall {
  override class var method: String { return "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetTransaction" }
}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCall: ClientCallUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCallBase: ClientCallUnaryBase<Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCall {
  override class var method: String { return "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetAccountTransactionHistory" }
}

/// Instantiate Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getAccountInfo(_ request: Org_Xrpl_Rpc_V1_GetAccountInfoRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetAccountInfoResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getAccountInfo(_ request: Org_Xrpl_Rpc_V1_GetAccountInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetAccountInfoResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCall

  /// Synchronous. Unary.
  func getFee(_ request: Org_Xrpl_Rpc_V1_GetFeeRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetFeeResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getFee(_ request: Org_Xrpl_Rpc_V1_GetFeeRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetFeeResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCall

  /// Synchronous. Unary.
  func submitTransaction(_ request: Org_Xrpl_Rpc_V1_SubmitTransactionRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_SubmitTransactionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func submitTransaction(_ request: Org_Xrpl_Rpc_V1_SubmitTransactionRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_SubmitTransactionResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCall

  /// Synchronous. Unary.
  func getTransaction(_ request: Org_Xrpl_Rpc_V1_GetTransactionRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetTransactionResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getTransaction(_ request: Org_Xrpl_Rpc_V1_GetTransactionRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetTransactionResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCall

  /// Synchronous. Unary.
  func getAccountTransactionHistory(_ request: Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getAccountTransactionHistory(_ request: Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCall

}

internal extension Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceService {
  /// Synchronous. Unary.
  func getAccountInfo(_ request: Org_Xrpl_Rpc_V1_GetAccountInfoRequest) throws -> Org_Xrpl_Rpc_V1_GetAccountInfoResponse {
    return try self.getAccountInfo(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getAccountInfo(_ request: Org_Xrpl_Rpc_V1_GetAccountInfoRequest, completion: @escaping (Org_Xrpl_Rpc_V1_GetAccountInfoResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCall {
    return try self.getAccountInfo(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getFee(_ request: Org_Xrpl_Rpc_V1_GetFeeRequest) throws -> Org_Xrpl_Rpc_V1_GetFeeResponse {
    return try self.getFee(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getFee(_ request: Org_Xrpl_Rpc_V1_GetFeeRequest, completion: @escaping (Org_Xrpl_Rpc_V1_GetFeeResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCall {
    return try self.getFee(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func submitTransaction(_ request: Org_Xrpl_Rpc_V1_SubmitTransactionRequest) throws -> Org_Xrpl_Rpc_V1_SubmitTransactionResponse {
    return try self.submitTransaction(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func submitTransaction(_ request: Org_Xrpl_Rpc_V1_SubmitTransactionRequest, completion: @escaping (Org_Xrpl_Rpc_V1_SubmitTransactionResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCall {
    return try self.submitTransaction(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getTransaction(_ request: Org_Xrpl_Rpc_V1_GetTransactionRequest) throws -> Org_Xrpl_Rpc_V1_GetTransactionResponse {
    return try self.getTransaction(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getTransaction(_ request: Org_Xrpl_Rpc_V1_GetTransactionRequest, completion: @escaping (Org_Xrpl_Rpc_V1_GetTransactionResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCall {
    return try self.getTransaction(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getAccountTransactionHistory(_ request: Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest) throws -> Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse {
    return try self.getAccountTransactionHistory(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getAccountTransactionHistory(_ request: Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, completion: @escaping (Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCall {
    return try self.getAccountTransactionHistory(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceServiceClient: ServiceClientBase, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceService {
  /// Synchronous. Unary.
  internal func getAccountInfo(_ request: Org_Xrpl_Rpc_V1_GetAccountInfoRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetAccountInfoResponse {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getAccountInfo(_ request: Org_Xrpl_Rpc_V1_GetAccountInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetAccountInfoResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCall {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getFee(_ request: Org_Xrpl_Rpc_V1_GetFeeRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetFeeResponse {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getFee(_ request: Org_Xrpl_Rpc_V1_GetFeeRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetFeeResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCall {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func submitTransaction(_ request: Org_Xrpl_Rpc_V1_SubmitTransactionRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_SubmitTransactionResponse {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func submitTransaction(_ request: Org_Xrpl_Rpc_V1_SubmitTransactionRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_SubmitTransactionResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCall {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getTransaction(_ request: Org_Xrpl_Rpc_V1_GetTransactionRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetTransactionResponse {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getTransaction(_ request: Org_Xrpl_Rpc_V1_GetTransactionRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetTransactionResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCall {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getAccountTransactionHistory(_ request: Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, metadata customMetadata: Metadata) throws -> Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getAccountTransactionHistory(_ request: Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, metadata customMetadata: Metadata, completion: @escaping (Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse?, CallResult) -> Void) throws -> Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCall {
    return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistoryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceProvider: ServiceProvider {
  func getAccountInfo(request: Org_Xrpl_Rpc_V1_GetAccountInfoRequest, session: Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoSession) throws -> Org_Xrpl_Rpc_V1_GetAccountInfoResponse
  func getFee(request: Org_Xrpl_Rpc_V1_GetFeeRequest, session: Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeSession) throws -> Org_Xrpl_Rpc_V1_GetFeeResponse
  func submitTransaction(request: Org_Xrpl_Rpc_V1_SubmitTransactionRequest, session: Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionSession) throws -> Org_Xrpl_Rpc_V1_SubmitTransactionResponse
  func getTransaction(request: Org_Xrpl_Rpc_V1_GetTransactionRequest, session: Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionSession) throws -> Org_Xrpl_Rpc_V1_GetTransactionResponse
  func getAccountTransactionHistory(request: Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, session: Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistorySession) throws -> Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse
}

extension Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceProvider {
  internal var serviceName: String { return "org.xrpl.rpc.v1.XRPLedgerAPIService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetAccountInfo":
      return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoSessionBase(
        handler: handler,
        providerBlock: { try self.getAccountInfo(request: $0, session: $1 as! Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoSessionBase) })
          .run()
    case "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetFee":
      return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeSessionBase(
        handler: handler,
        providerBlock: { try self.getFee(request: $0, session: $1 as! Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeSessionBase) })
          .run()
    case "/org.xrpl.rpc.v1.XRPLedgerAPIService/SubmitTransaction":
      return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionSessionBase(
        handler: handler,
        providerBlock: { try self.submitTransaction(request: $0, session: $1 as! Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionSessionBase) })
          .run()
    case "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetTransaction":
      return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionSessionBase(
        handler: handler,
        providerBlock: { try self.getTransaction(request: $0, session: $1 as! Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionSessionBase) })
          .run()
    case "/org.xrpl.rpc.v1.XRPLedgerAPIService/GetAccountTransactionHistory":
      return try Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistorySessionBase(
        handler: handler,
        providerBlock: { try self.getAccountTransactionHistory(request: $0, session: $1 as! Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistorySessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoSession: ServerSessionUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoSessionBase: ServerSessionUnaryBase<Org_Xrpl_Rpc_V1_GetAccountInfoRequest, Org_Xrpl_Rpc_V1_GetAccountInfoResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountInfoSession {}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeSession: ServerSessionUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeSessionBase: ServerSessionUnaryBase<Org_Xrpl_Rpc_V1_GetFeeRequest, Org_Xrpl_Rpc_V1_GetFeeResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetFeeSession {}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionSession: ServerSessionUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionSessionBase: ServerSessionUnaryBase<Org_Xrpl_Rpc_V1_SubmitTransactionRequest, Org_Xrpl_Rpc_V1_SubmitTransactionResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceSubmitTransactionSession {}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionSession: ServerSessionUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionSessionBase: ServerSessionUnaryBase<Org_Xrpl_Rpc_V1_GetTransactionRequest, Org_Xrpl_Rpc_V1_GetTransactionResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetTransactionSession {}

internal protocol Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistorySession: ServerSessionUnary {}

fileprivate final class Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistorySessionBase: ServerSessionUnaryBase<Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryRequest, Org_Xrpl_Rpc_V1_GetAccountTransactionHistoryResponse>, Org_Xrpl_Rpc_V1_XRPLedgerAPIServiceGetAccountTransactionHistorySession {}
