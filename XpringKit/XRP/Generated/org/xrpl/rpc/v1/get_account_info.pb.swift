// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/get_account_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A request to get info about an account.
/// Next field: 6
public struct Org_Xrpl_Rpc_V1_GetAccountInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The address to get info about.
  public var account: Org_Xrpl_Rpc_V1_AccountAddress {
    get {return _account ?? Org_Xrpl_Rpc_V1_AccountAddress()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var strict: Bool = false

  public var ledger: Org_Xrpl_Rpc_V1_LedgerSpecifier {
    get {return _ledger ?? Org_Xrpl_Rpc_V1_LedgerSpecifier()}
    set {_ledger = newValue}
  }
  /// Returns true if `ledger` has been explicitly set.
  public var hasLedger: Bool {return self._ledger != nil}
  /// Clears the value of `ledger`. Subsequent reads from it will return its default value.
  public mutating func clearLedger() {self._ledger = nil}

  public var queue: Bool = false

  public var signerLists: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Org_Xrpl_Rpc_V1_AccountAddress? = nil
  fileprivate var _ledger: Org_Xrpl_Rpc_V1_LedgerSpecifier? = nil
}

/// Response to GetAccountInfo RPC
/// Next field: 6
public struct Org_Xrpl_Rpc_V1_GetAccountInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountData: Org_Xrpl_Rpc_V1_AccountRoot {
    get {return _accountData ?? Org_Xrpl_Rpc_V1_AccountRoot()}
    set {_accountData = newValue}
  }
  /// Returns true if `accountData` has been explicitly set.
  public var hasAccountData: Bool {return self._accountData != nil}
  /// Clears the value of `accountData`. Subsequent reads from it will return its default value.
  public mutating func clearAccountData() {self._accountData = nil}

  public var signerList: Org_Xrpl_Rpc_V1_SignerList {
    get {return _signerList ?? Org_Xrpl_Rpc_V1_SignerList()}
    set {_signerList = newValue}
  }
  /// Returns true if `signerList` has been explicitly set.
  public var hasSignerList: Bool {return self._signerList != nil}
  /// Clears the value of `signerList`. Subsequent reads from it will return its default value.
  public mutating func clearSignerList() {self._signerList = nil}

  public var ledgerIndex: UInt32 = 0

  public var queueData: Org_Xrpl_Rpc_V1_QueueData {
    get {return _queueData ?? Org_Xrpl_Rpc_V1_QueueData()}
    set {_queueData = newValue}
  }
  /// Returns true if `queueData` has been explicitly set.
  public var hasQueueData: Bool {return self._queueData != nil}
  /// Clears the value of `queueData`. Subsequent reads from it will return its default value.
  public mutating func clearQueueData() {self._queueData = nil}

  public var validated: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _accountData: Org_Xrpl_Rpc_V1_AccountRoot? = nil
  fileprivate var _signerList: Org_Xrpl_Rpc_V1_SignerList? = nil
  fileprivate var _queueData: Org_Xrpl_Rpc_V1_QueueData? = nil
}

/// Aggregate data about queued transactions
/// Next field: 7
public struct Org_Xrpl_Rpc_V1_QueueData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var txnCount: UInt32 = 0

  public var authChangeQueued: Bool = false

  public var lowestSequence: UInt32 = 0

  public var highestSequence: UInt32 = 0

  public var maxSpendDropsTotal: Org_Xrpl_Rpc_V1_XRPDropsAmount {
    get {return _maxSpendDropsTotal ?? Org_Xrpl_Rpc_V1_XRPDropsAmount()}
    set {_maxSpendDropsTotal = newValue}
  }
  /// Returns true if `maxSpendDropsTotal` has been explicitly set.
  public var hasMaxSpendDropsTotal: Bool {return self._maxSpendDropsTotal != nil}
  /// Clears the value of `maxSpendDropsTotal`. Subsequent reads from it will return its default value.
  public mutating func clearMaxSpendDropsTotal() {self._maxSpendDropsTotal = nil}

  public var transactions: [Org_Xrpl_Rpc_V1_QueuedTransaction] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _maxSpendDropsTotal: Org_Xrpl_Rpc_V1_XRPDropsAmount? = nil
}

/// Data about a single queued transaction
/// Next field: 7
public struct Org_Xrpl_Rpc_V1_QueuedTransaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var authChange: Bool = false

  public var fee: Org_Xrpl_Rpc_V1_XRPDropsAmount {
    get {return _fee ?? Org_Xrpl_Rpc_V1_XRPDropsAmount()}
    set {_fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return self._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {self._fee = nil}

  public var feeLevel: UInt64 = 0

  public var maxSpendDrops: Org_Xrpl_Rpc_V1_XRPDropsAmount {
    get {return _maxSpendDrops ?? Org_Xrpl_Rpc_V1_XRPDropsAmount()}
    set {_maxSpendDrops = newValue}
  }
  /// Returns true if `maxSpendDrops` has been explicitly set.
  public var hasMaxSpendDrops: Bool {return self._maxSpendDrops != nil}
  /// Clears the value of `maxSpendDrops`. Subsequent reads from it will return its default value.
  public mutating func clearMaxSpendDrops() {self._maxSpendDrops = nil}

  public var sequence: Org_Xrpl_Rpc_V1_Sequence {
    get {return _sequence ?? Org_Xrpl_Rpc_V1_Sequence()}
    set {_sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  public var hasSequence: Bool {return self._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  public mutating func clearSequence() {self._sequence = nil}

  public var lastLedgerSequence: Org_Xrpl_Rpc_V1_LastLedgerSequence {
    get {return _lastLedgerSequence ?? Org_Xrpl_Rpc_V1_LastLedgerSequence()}
    set {_lastLedgerSequence = newValue}
  }
  /// Returns true if `lastLedgerSequence` has been explicitly set.
  public var hasLastLedgerSequence: Bool {return self._lastLedgerSequence != nil}
  /// Clears the value of `lastLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearLastLedgerSequence() {self._lastLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fee: Org_Xrpl_Rpc_V1_XRPDropsAmount? = nil
  fileprivate var _maxSpendDrops: Org_Xrpl_Rpc_V1_XRPDropsAmount? = nil
  fileprivate var _sequence: Org_Xrpl_Rpc_V1_Sequence? = nil
  fileprivate var _lastLedgerSequence: Org_Xrpl_Rpc_V1_LastLedgerSequence? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.xrpl.rpc.v1"

extension Org_Xrpl_Rpc_V1_GetAccountInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAccountInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "strict"),
    3: .same(proto: "ledger"),
    4: .same(proto: "queue"),
    5: .standard(proto: "signer_lists"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularBoolField(value: &self.strict)
      case 3: try decoder.decodeSingularMessageField(value: &self._ledger)
      case 4: try decoder.decodeSingularBoolField(value: &self.queue)
      case 5: try decoder.decodeSingularBoolField(value: &self.signerLists)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.strict != false {
      try visitor.visitSingularBoolField(value: self.strict, fieldNumber: 2)
    }
    if let v = self._ledger {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.queue != false {
      try visitor.visitSingularBoolField(value: self.queue, fieldNumber: 4)
    }
    if self.signerLists != false {
      try visitor.visitSingularBoolField(value: self.signerLists, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetAccountInfoRequest, rhs: Org_Xrpl_Rpc_V1_GetAccountInfoRequest) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.strict != rhs.strict {return false}
    if lhs._ledger != rhs._ledger {return false}
    if lhs.queue != rhs.queue {return false}
    if lhs.signerLists != rhs.signerLists {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_GetAccountInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetAccountInfoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_data"),
    2: .standard(proto: "signer_list"),
    3: .standard(proto: "ledger_index"),
    4: .standard(proto: "queue_data"),
    5: .same(proto: "validated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._accountData)
      case 2: try decoder.decodeSingularMessageField(value: &self._signerList)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.ledgerIndex)
      case 4: try decoder.decodeSingularMessageField(value: &self._queueData)
      case 5: try decoder.decodeSingularBoolField(value: &self.validated)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._accountData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._signerList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.ledgerIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.ledgerIndex, fieldNumber: 3)
    }
    if let v = self._queueData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.validated != false {
      try visitor.visitSingularBoolField(value: self.validated, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetAccountInfoResponse, rhs: Org_Xrpl_Rpc_V1_GetAccountInfoResponse) -> Bool {
    if lhs._accountData != rhs._accountData {return false}
    if lhs._signerList != rhs._signerList {return false}
    if lhs.ledgerIndex != rhs.ledgerIndex {return false}
    if lhs._queueData != rhs._queueData {return false}
    if lhs.validated != rhs.validated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_QueueData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueueData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "txn_count"),
    2: .standard(proto: "auth_change_queued"),
    3: .standard(proto: "lowest_sequence"),
    4: .standard(proto: "highest_sequence"),
    5: .standard(proto: "max_spend_drops_total"),
    6: .same(proto: "transactions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.txnCount)
      case 2: try decoder.decodeSingularBoolField(value: &self.authChangeQueued)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.lowestSequence)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.highestSequence)
      case 5: try decoder.decodeSingularMessageField(value: &self._maxSpendDropsTotal)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.transactions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.txnCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.txnCount, fieldNumber: 1)
    }
    if self.authChangeQueued != false {
      try visitor.visitSingularBoolField(value: self.authChangeQueued, fieldNumber: 2)
    }
    if self.lowestSequence != 0 {
      try visitor.visitSingularUInt32Field(value: self.lowestSequence, fieldNumber: 3)
    }
    if self.highestSequence != 0 {
      try visitor.visitSingularUInt32Field(value: self.highestSequence, fieldNumber: 4)
    }
    if let v = self._maxSpendDropsTotal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.transactions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transactions, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_QueueData, rhs: Org_Xrpl_Rpc_V1_QueueData) -> Bool {
    if lhs.txnCount != rhs.txnCount {return false}
    if lhs.authChangeQueued != rhs.authChangeQueued {return false}
    if lhs.lowestSequence != rhs.lowestSequence {return false}
    if lhs.highestSequence != rhs.highestSequence {return false}
    if lhs._maxSpendDropsTotal != rhs._maxSpendDropsTotal {return false}
    if lhs.transactions != rhs.transactions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_QueuedTransaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QueuedTransaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auth_change"),
    2: .same(proto: "fee"),
    3: .standard(proto: "fee_level"),
    4: .standard(proto: "max_spend_drops"),
    5: .same(proto: "sequence"),
    6: .standard(proto: "last_ledger_sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.authChange)
      case 2: try decoder.decodeSingularMessageField(value: &self._fee)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.feeLevel)
      case 4: try decoder.decodeSingularMessageField(value: &self._maxSpendDrops)
      case 5: try decoder.decodeSingularMessageField(value: &self._sequence)
      case 6: try decoder.decodeSingularMessageField(value: &self._lastLedgerSequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.authChange != false {
      try visitor.visitSingularBoolField(value: self.authChange, fieldNumber: 1)
    }
    if let v = self._fee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.feeLevel != 0 {
      try visitor.visitSingularUInt64Field(value: self.feeLevel, fieldNumber: 3)
    }
    if let v = self._maxSpendDrops {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._sequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._lastLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_QueuedTransaction, rhs: Org_Xrpl_Rpc_V1_QueuedTransaction) -> Bool {
    if lhs.authChange != rhs.authChange {return false}
    if lhs._fee != rhs._fee {return false}
    if lhs.feeLevel != rhs.feeLevel {return false}
    if lhs._maxSpendDrops != rhs._maxSpendDrops {return false}
    if lhs._sequence != rhs._sequence {return false}
    if lhs._lastLedgerSequence != rhs._lastLedgerSequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
