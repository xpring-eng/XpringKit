// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/get_transaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Next field: 4
public struct Org_Xrpl_Rpc_V1_GetTransactionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hash of the transaction. 32 bytes
  /// ATTN: this is in binary, not hex. The JSON API accepts a hex string for
  /// a transaction hash, but here we need that hex string converted into its
  /// binary form. Each pair of hex characters should be converted into its
  /// corresponding byte. For example, the 4 character hex string "00FF"
  /// should be converted to a 2 byte array: [0, 255]
  public var hash: Data = SwiftProtobuf.Internal.emptyData

  /// if true, return data in binary format. defaults to false
  public var binary: Bool = false

  /// search only specified range. optional
  public var ledgerRange: Org_Xrpl_Rpc_V1_LedgerRange {
    get {return _ledgerRange ?? Org_Xrpl_Rpc_V1_LedgerRange()}
    set {_ledgerRange = newValue}
  }
  /// Returns true if `ledgerRange` has been explicitly set.
  public var hasLedgerRange: Bool {return self._ledgerRange != nil}
  /// Clears the value of `ledgerRange`. Subsequent reads from it will return its default value.
  public mutating func clearLedgerRange() {self._ledgerRange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ledgerRange: Org_Xrpl_Rpc_V1_LedgerRange? = nil
}

/// Next field: 9
public struct Org_Xrpl_Rpc_V1_GetTransactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var serializedTransaction: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedTransaction? = nil

  public var transaction: Org_Xrpl_Rpc_V1_Transaction {
    get {
      if case .transaction(let v)? = serializedTransaction {return v}
      return Org_Xrpl_Rpc_V1_Transaction()
    }
    set {serializedTransaction = .transaction(newValue)}
  }

  /// Variable length
  public var transactionBinary: Data {
    get {
      if case .transactionBinary(let v)? = serializedTransaction {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {serializedTransaction = .transactionBinary(newValue)}
  }

  /// Sequence number of ledger that contains this transaction
  public var ledgerIndex: UInt32 = 0

  /// 32 bytes
  public var hash: Data = SwiftProtobuf.Internal.emptyData

  /// whether the ledger has been validated
  public var validated: Bool = false

  /// metadata about the transaction
  public var serializedMeta: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedMeta? = nil

  public var meta: Org_Xrpl_Rpc_V1_Meta {
    get {
      if case .meta(let v)? = serializedMeta {return v}
      return Org_Xrpl_Rpc_V1_Meta()
    }
    set {serializedMeta = .meta(newValue)}
  }

  /// Variable length
  public var metaBinary: Data {
    get {
      if case .metaBinary(let v)? = serializedMeta {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {serializedMeta = .metaBinary(newValue)}
  }

  public var date: Org_Xrpl_Rpc_V1_Date {
    get {return _date ?? Org_Xrpl_Rpc_V1_Date()}
    set {_date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return self._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {self._date = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_SerializedTransaction: Equatable {
    case transaction(Org_Xrpl_Rpc_V1_Transaction)
    /// Variable length
    case transactionBinary(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedTransaction, rhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedTransaction) -> Bool {
      switch (lhs, rhs) {
      case (.transaction(let l), .transaction(let r)): return l == r
      case (.transactionBinary(let l), .transactionBinary(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// metadata about the transaction
  public enum OneOf_SerializedMeta: Equatable {
    case meta(Org_Xrpl_Rpc_V1_Meta)
    /// Variable length
    case metaBinary(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedMeta, rhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedMeta) -> Bool {
      switch (lhs, rhs) {
      case (.meta(let l), .meta(let r)): return l == r
      case (.metaBinary(let l), .metaBinary(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _date: Org_Xrpl_Rpc_V1_Date? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.xrpl.rpc.v1"

extension Org_Xrpl_Rpc_V1_GetTransactionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTransactionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "binary"),
    3: .standard(proto: "ledger_range"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hash)
      case 2: try decoder.decodeSingularBoolField(value: &self.binary)
      case 3: try decoder.decodeSingularMessageField(value: &self._ledgerRange)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 1)
    }
    if self.binary != false {
      try visitor.visitSingularBoolField(value: self.binary, fieldNumber: 2)
    }
    if let v = self._ledgerRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionRequest, rhs: Org_Xrpl_Rpc_V1_GetTransactionRequest) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.binary != rhs.binary {return false}
    if lhs._ledgerRange != rhs._ledgerRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_GetTransactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTransactionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .standard(proto: "transaction_binary"),
    3: .standard(proto: "ledger_index"),
    4: .same(proto: "hash"),
    5: .same(proto: "validated"),
    6: .same(proto: "meta"),
    7: .standard(proto: "meta_binary"),
    8: .same(proto: "date"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Org_Xrpl_Rpc_V1_Transaction?
        if let current = self.serializedTransaction {
          try decoder.handleConflictingOneOf()
          if case .transaction(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.serializedTransaction = .transaction(v)}
      case 2:
        if self.serializedTransaction != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.serializedTransaction = .transactionBinary(v)}
      case 3: try decoder.decodeSingularUInt32Field(value: &self.ledgerIndex)
      case 4: try decoder.decodeSingularBytesField(value: &self.hash)
      case 5: try decoder.decodeSingularBoolField(value: &self.validated)
      case 6:
        var v: Org_Xrpl_Rpc_V1_Meta?
        if let current = self.serializedMeta {
          try decoder.handleConflictingOneOf()
          if case .meta(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.serializedMeta = .meta(v)}
      case 7:
        if self.serializedMeta != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.serializedMeta = .metaBinary(v)}
      case 8: try decoder.decodeSingularMessageField(value: &self._date)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.serializedTransaction {
    case .transaction(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .transactionBinary(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    case nil: break
    }
    if self.ledgerIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.ledgerIndex, fieldNumber: 3)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 4)
    }
    if self.validated != false {
      try visitor.visitSingularBoolField(value: self.validated, fieldNumber: 5)
    }
    switch self.serializedMeta {
    case .meta(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .metaBinary(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
    case nil: break
    }
    if let v = self._date {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionResponse, rhs: Org_Xrpl_Rpc_V1_GetTransactionResponse) -> Bool {
    if lhs.serializedTransaction != rhs.serializedTransaction {return false}
    if lhs.ledgerIndex != rhs.ledgerIndex {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.validated != rhs.validated {return false}
    if lhs.serializedMeta != rhs.serializedMeta {return false}
    if lhs._date != rhs._date {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
