// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/submit.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A request to submit the signed transaction to the ledger.
/// Next field: 3
public struct Org_Xrpl_Rpc_V1_SubmitTransactionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The signed transaction to submit.
  public var signedTransaction: Data = SwiftProtobuf.Internal.emptyData

  public var failHard: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A response when a signed transaction is submitted to the ledger.
/// Next field: 5
public struct Org_Xrpl_Rpc_V1_SubmitTransactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Code indicating the preliminary result of the transaction.
  public var engineResult: Org_Xrpl_Rpc_V1_TransactionResult {
    get {return _engineResult ?? Org_Xrpl_Rpc_V1_TransactionResult()}
    set {_engineResult = newValue}
  }
  /// Returns true if `engineResult` has been explicitly set.
  public var hasEngineResult: Bool {return self._engineResult != nil}
  /// Clears the value of `engineResult`. Subsequent reads from it will return its default value.
  public mutating func clearEngineResult() {self._engineResult = nil}

  /// Numeric code indicating the preliminary result of the transaction,
  /// directly correlated to engine_result.
  public var engineResultCode: Int64 = 0

  /// Human-readable explanation of the transaction's preliminary result.
  public var engineResultMessage: String = String()

  /// 32 bytes
  public var hash: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _engineResult: Org_Xrpl_Rpc_V1_TransactionResult? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.xrpl.rpc.v1"

extension Org_Xrpl_Rpc_V1_SubmitTransactionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitTransactionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_transaction"),
    2: .standard(proto: "fail_hard"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.signedTransaction)
      case 2: try decoder.decodeSingularBoolField(value: &self.failHard)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signedTransaction.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedTransaction, fieldNumber: 1)
    }
    if self.failHard != false {
      try visitor.visitSingularBoolField(value: self.failHard, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_SubmitTransactionRequest, rhs: Org_Xrpl_Rpc_V1_SubmitTransactionRequest) -> Bool {
    if lhs.signedTransaction != rhs.signedTransaction {return false}
    if lhs.failHard != rhs.failHard {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_SubmitTransactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitTransactionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "engine_result"),
    2: .standard(proto: "engine_result_code"),
    3: .standard(proto: "engine_result_message"),
    4: .same(proto: "hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._engineResult)
      case 2: try decoder.decodeSingularInt64Field(value: &self.engineResultCode)
      case 3: try decoder.decodeSingularStringField(value: &self.engineResultMessage)
      case 4: try decoder.decodeSingularBytesField(value: &self.hash)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._engineResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.engineResultCode != 0 {
      try visitor.visitSingularInt64Field(value: self.engineResultCode, fieldNumber: 2)
    }
    if !self.engineResultMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.engineResultMessage, fieldNumber: 3)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_SubmitTransactionResponse, rhs: Org_Xrpl_Rpc_V1_SubmitTransactionResponse) -> Bool {
    if lhs._engineResult != rhs._engineResult {return false}
    if lhs.engineResultCode != rhs.engineResultCode {return false}
    if lhs.engineResultMessage != rhs.engineResultMessage {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
