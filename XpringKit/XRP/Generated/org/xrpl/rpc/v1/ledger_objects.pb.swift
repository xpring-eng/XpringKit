// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/ledger_objects.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Next field: 13
public enum Org_Xrpl_Rpc_V1_LedgerEntryType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case accountRoot // = 1
  case amendments // = 2
  case check // = 3
  case depositPreauth // = 4
  case directoryNode // = 5
  case escrow // = 6
  case feeSettings // = 7
  case ledgerHashes // = 8
  case offer // = 9
  case payChannel // = 10
  case rippleState // = 11
  case signerList // = 12
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .accountRoot
    case 2: self = .amendments
    case 3: self = .check
    case 4: self = .depositPreauth
    case 5: self = .directoryNode
    case 6: self = .escrow
    case 7: self = .feeSettings
    case 8: self = .ledgerHashes
    case 9: self = .offer
    case 10: self = .payChannel
    case 11: self = .rippleState
    case 12: self = .signerList
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .accountRoot: return 1
    case .amendments: return 2
    case .check: return 3
    case .depositPreauth: return 4
    case .directoryNode: return 5
    case .escrow: return 6
    case .feeSettings: return 7
    case .ledgerHashes: return 8
    case .offer: return 9
    case .payChannel: return 10
    case .rippleState: return 11
    case .signerList: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Org_Xrpl_Rpc_V1_LedgerEntryType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Org_Xrpl_Rpc_V1_LedgerEntryType] = [
    .unspecified,
    .accountRoot,
    .amendments,
    .check,
    .depositPreauth,
    .directoryNode,
    .escrow,
    .feeSettings,
    .ledgerHashes,
    .offer,
    .payChannel,
    .rippleState,
    .signerList,
  ]
}

#endif  // swift(>=4.2)

/// Next field: 13
public struct Org_Xrpl_Rpc_V1_LedgerObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var object: OneOf_Object? {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  public var accountRoot: Org_Xrpl_Rpc_V1_AccountRoot {
    get {
      if case .accountRoot(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_AccountRoot()
    }
    set {_uniqueStorage()._object = .accountRoot(newValue)}
  }

  public var amendments: Org_Xrpl_Rpc_V1_Amendments {
    get {
      if case .amendments(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_Amendments()
    }
    set {_uniqueStorage()._object = .amendments(newValue)}
  }

  public var check: Org_Xrpl_Rpc_V1_Check {
    get {
      if case .check(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_Check()
    }
    set {_uniqueStorage()._object = .check(newValue)}
  }

  public var depositPreauth: Org_Xrpl_Rpc_V1_DepositPreauthObject {
    get {
      if case .depositPreauth(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_DepositPreauthObject()
    }
    set {_uniqueStorage()._object = .depositPreauth(newValue)}
  }

  public var directoryNode: Org_Xrpl_Rpc_V1_DirectoryNode {
    get {
      if case .directoryNode(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_DirectoryNode()
    }
    set {_uniqueStorage()._object = .directoryNode(newValue)}
  }

  public var escrow: Org_Xrpl_Rpc_V1_Escrow {
    get {
      if case .escrow(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_Escrow()
    }
    set {_uniqueStorage()._object = .escrow(newValue)}
  }

  public var feeSettings: Org_Xrpl_Rpc_V1_FeeSettings {
    get {
      if case .feeSettings(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_FeeSettings()
    }
    set {_uniqueStorage()._object = .feeSettings(newValue)}
  }

  public var ledgerHashes: Org_Xrpl_Rpc_V1_LedgerHashes {
    get {
      if case .ledgerHashes(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_LedgerHashes()
    }
    set {_uniqueStorage()._object = .ledgerHashes(newValue)}
  }

  public var offer: Org_Xrpl_Rpc_V1_Offer {
    get {
      if case .offer(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_Offer()
    }
    set {_uniqueStorage()._object = .offer(newValue)}
  }

  public var payChannel: Org_Xrpl_Rpc_V1_PayChannel {
    get {
      if case .payChannel(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_PayChannel()
    }
    set {_uniqueStorage()._object = .payChannel(newValue)}
  }

  public var rippleState: Org_Xrpl_Rpc_V1_RippleState {
    get {
      if case .rippleState(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_RippleState()
    }
    set {_uniqueStorage()._object = .rippleState(newValue)}
  }

  public var signerList: Org_Xrpl_Rpc_V1_SignerList {
    get {
      if case .signerList(let v)? = _storage._object {return v}
      return Org_Xrpl_Rpc_V1_SignerList()
    }
    set {_uniqueStorage()._object = .signerList(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Object: Equatable {
    case accountRoot(Org_Xrpl_Rpc_V1_AccountRoot)
    case amendments(Org_Xrpl_Rpc_V1_Amendments)
    case check(Org_Xrpl_Rpc_V1_Check)
    case depositPreauth(Org_Xrpl_Rpc_V1_DepositPreauthObject)
    case directoryNode(Org_Xrpl_Rpc_V1_DirectoryNode)
    case escrow(Org_Xrpl_Rpc_V1_Escrow)
    case feeSettings(Org_Xrpl_Rpc_V1_FeeSettings)
    case ledgerHashes(Org_Xrpl_Rpc_V1_LedgerHashes)
    case offer(Org_Xrpl_Rpc_V1_Offer)
    case payChannel(Org_Xrpl_Rpc_V1_PayChannel)
    case rippleState(Org_Xrpl_Rpc_V1_RippleState)
    case signerList(Org_Xrpl_Rpc_V1_SignerList)

  #if !swift(>=4.1)
    public static func ==(lhs: Org_Xrpl_Rpc_V1_LedgerObject.OneOf_Object, rhs: Org_Xrpl_Rpc_V1_LedgerObject.OneOf_Object) -> Bool {
      switch (lhs, rhs) {
      case (.accountRoot(let l), .accountRoot(let r)): return l == r
      case (.amendments(let l), .amendments(let r)): return l == r
      case (.check(let l), .check(let r)): return l == r
      case (.depositPreauth(let l), .depositPreauth(let r)): return l == r
      case (.directoryNode(let l), .directoryNode(let r)): return l == r
      case (.escrow(let l), .escrow(let r)): return l == r
      case (.feeSettings(let l), .feeSettings(let r)): return l == r
      case (.ledgerHashes(let l), .ledgerHashes(let r)): return l == r
      case (.offer(let l), .offer(let r)): return l == r
      case (.payChannel(let l), .payChannel(let r)): return l == r
      case (.rippleState(let l), .rippleState(let r)): return l == r
      case (.signerList(let l), .signerList(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 15
public struct Org_Xrpl_Rpc_V1_AccountRoot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _storage._account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {_uniqueStorage()._account = nil}

  public var balance: Org_Xrpl_Rpc_V1_Balance {
    get {return _storage._balance ?? Org_Xrpl_Rpc_V1_Balance()}
    set {_uniqueStorage()._balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool {return _storage._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() {_uniqueStorage()._balance = nil}

  public var sequence: Org_Xrpl_Rpc_V1_Sequence {
    get {return _storage._sequence ?? Org_Xrpl_Rpc_V1_Sequence()}
    set {_uniqueStorage()._sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  public var hasSequence: Bool {return _storage._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  public mutating func clearSequence() {_uniqueStorage()._sequence = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var ownerCount: Org_Xrpl_Rpc_V1_OwnerCount {
    get {return _storage._ownerCount ?? Org_Xrpl_Rpc_V1_OwnerCount()}
    set {_uniqueStorage()._ownerCount = newValue}
  }
  /// Returns true if `ownerCount` has been explicitly set.
  public var hasOwnerCount: Bool {return _storage._ownerCount != nil}
  /// Clears the value of `ownerCount`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerCount() {_uniqueStorage()._ownerCount = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var accountTransactionID: Org_Xrpl_Rpc_V1_AccountTransactionID {
    get {return _storage._accountTransactionID ?? Org_Xrpl_Rpc_V1_AccountTransactionID()}
    set {_uniqueStorage()._accountTransactionID = newValue}
  }
  /// Returns true if `accountTransactionID` has been explicitly set.
  public var hasAccountTransactionID: Bool {return _storage._accountTransactionID != nil}
  /// Clears the value of `accountTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountTransactionID() {_uniqueStorage()._accountTransactionID = nil}

  public var domain: Org_Xrpl_Rpc_V1_Domain {
    get {return _storage._domain ?? Org_Xrpl_Rpc_V1_Domain()}
    set {_uniqueStorage()._domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  public var hasDomain: Bool {return _storage._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  public mutating func clearDomain() {_uniqueStorage()._domain = nil}

  public var emailHash: Org_Xrpl_Rpc_V1_EmailHash {
    get {return _storage._emailHash ?? Org_Xrpl_Rpc_V1_EmailHash()}
    set {_uniqueStorage()._emailHash = newValue}
  }
  /// Returns true if `emailHash` has been explicitly set.
  public var hasEmailHash: Bool {return _storage._emailHash != nil}
  /// Clears the value of `emailHash`. Subsequent reads from it will return its default value.
  public mutating func clearEmailHash() {_uniqueStorage()._emailHash = nil}

  public var messageKey: Org_Xrpl_Rpc_V1_MessageKey {
    get {return _storage._messageKey ?? Org_Xrpl_Rpc_V1_MessageKey()}
    set {_uniqueStorage()._messageKey = newValue}
  }
  /// Returns true if `messageKey` has been explicitly set.
  public var hasMessageKey: Bool {return _storage._messageKey != nil}
  /// Clears the value of `messageKey`. Subsequent reads from it will return its default value.
  public mutating func clearMessageKey() {_uniqueStorage()._messageKey = nil}

  public var regularKey: Org_Xrpl_Rpc_V1_RegularKey {
    get {return _storage._regularKey ?? Org_Xrpl_Rpc_V1_RegularKey()}
    set {_uniqueStorage()._regularKey = newValue}
  }
  /// Returns true if `regularKey` has been explicitly set.
  public var hasRegularKey: Bool {return _storage._regularKey != nil}
  /// Clears the value of `regularKey`. Subsequent reads from it will return its default value.
  public mutating func clearRegularKey() {_uniqueStorage()._regularKey = nil}

  public var tickSize: Org_Xrpl_Rpc_V1_TickSize {
    get {return _storage._tickSize ?? Org_Xrpl_Rpc_V1_TickSize()}
    set {_uniqueStorage()._tickSize = newValue}
  }
  /// Returns true if `tickSize` has been explicitly set.
  public var hasTickSize: Bool {return _storage._tickSize != nil}
  /// Clears the value of `tickSize`. Subsequent reads from it will return its default value.
  public mutating func clearTickSize() {_uniqueStorage()._tickSize = nil}

  public var transferRate: Org_Xrpl_Rpc_V1_TransferRate {
    get {return _storage._transferRate ?? Org_Xrpl_Rpc_V1_TransferRate()}
    set {_uniqueStorage()._transferRate = newValue}
  }
  /// Returns true if `transferRate` has been explicitly set.
  public var hasTransferRate: Bool {return _storage._transferRate != nil}
  /// Clears the value of `transferRate`. Subsequent reads from it will return its default value.
  public mutating func clearTransferRate() {_uniqueStorage()._transferRate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 4
public struct Org_Xrpl_Rpc_V1_Amendments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amendments: [Org_Xrpl_Rpc_V1_Amendments.Amendment] {
    get {return _storage._amendments}
    set {_uniqueStorage()._amendments = newValue}
  }

  public var majorities: [Org_Xrpl_Rpc_V1_Amendments.Majority] {
    get {return _storage._majorities}
    set {_uniqueStorage()._majorities = newValue}
  }

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Next field: 2
  public struct Amendment {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 32 bytes
    public var value: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Next field: 3
  public struct Majority {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var amendment: Org_Xrpl_Rpc_V1_Amendments.Amendment {
      get {return _storage._amendment ?? Org_Xrpl_Rpc_V1_Amendments.Amendment()}
      set {_uniqueStorage()._amendment = newValue}
    }
    /// Returns true if `amendment` has been explicitly set.
    public var hasAmendment: Bool {return _storage._amendment != nil}
    /// Clears the value of `amendment`. Subsequent reads from it will return its default value.
    public mutating func clearAmendment() {_uniqueStorage()._amendment = nil}

    public var closeTime: Org_Xrpl_Rpc_V1_CloseTime {
      get {return _storage._closeTime ?? Org_Xrpl_Rpc_V1_CloseTime()}
      set {_uniqueStorage()._closeTime = newValue}
    }
    /// Returns true if `closeTime` has been explicitly set.
    public var hasCloseTime: Bool {return _storage._closeTime != nil}
    /// Clears the value of `closeTime`. Subsequent reads from it will return its default value.
    public mutating func clearCloseTime() {_uniqueStorage()._closeTime = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 14
public struct Org_Xrpl_Rpc_V1_Check {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _storage._account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {_uniqueStorage()._account = nil}

  public var destination: Org_Xrpl_Rpc_V1_Destination {
    get {return _storage._destination ?? Org_Xrpl_Rpc_V1_Destination()}
    set {_uniqueStorage()._destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return _storage._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {_uniqueStorage()._destination = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _storage._ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_uniqueStorage()._ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return _storage._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {_uniqueStorage()._ownerNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var sendMax: Org_Xrpl_Rpc_V1_SendMax {
    get {return _storage._sendMax ?? Org_Xrpl_Rpc_V1_SendMax()}
    set {_uniqueStorage()._sendMax = newValue}
  }
  /// Returns true if `sendMax` has been explicitly set.
  public var hasSendMax: Bool {return _storage._sendMax != nil}
  /// Clears the value of `sendMax`. Subsequent reads from it will return its default value.
  public mutating func clearSendMax() {_uniqueStorage()._sendMax = nil}

  public var sequence: Org_Xrpl_Rpc_V1_Sequence {
    get {return _storage._sequence ?? Org_Xrpl_Rpc_V1_Sequence()}
    set {_uniqueStorage()._sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  public var hasSequence: Bool {return _storage._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  public mutating func clearSequence() {_uniqueStorage()._sequence = nil}

  public var destinationNode: Org_Xrpl_Rpc_V1_DestinationNode {
    get {return _storage._destinationNode ?? Org_Xrpl_Rpc_V1_DestinationNode()}
    set {_uniqueStorage()._destinationNode = newValue}
  }
  /// Returns true if `destinationNode` has been explicitly set.
  public var hasDestinationNode: Bool {return _storage._destinationNode != nil}
  /// Clears the value of `destinationNode`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationNode() {_uniqueStorage()._destinationNode = nil}

  public var destinationTag: Org_Xrpl_Rpc_V1_DestinationTag {
    get {return _storage._destinationTag ?? Org_Xrpl_Rpc_V1_DestinationTag()}
    set {_uniqueStorage()._destinationTag = newValue}
  }
  /// Returns true if `destinationTag` has been explicitly set.
  public var hasDestinationTag: Bool {return _storage._destinationTag != nil}
  /// Clears the value of `destinationTag`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationTag() {_uniqueStorage()._destinationTag = nil}

  public var expiration: Org_Xrpl_Rpc_V1_Expiration {
    get {return _storage._expiration ?? Org_Xrpl_Rpc_V1_Expiration()}
    set {_uniqueStorage()._expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  public var hasExpiration: Bool {return _storage._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  public mutating func clearExpiration() {_uniqueStorage()._expiration = nil}

  public var invoiceID: Org_Xrpl_Rpc_V1_InvoiceID {
    get {return _storage._invoiceID ?? Org_Xrpl_Rpc_V1_InvoiceID()}
    set {_uniqueStorage()._invoiceID = newValue}
  }
  /// Returns true if `invoiceID` has been explicitly set.
  public var hasInvoiceID: Bool {return _storage._invoiceID != nil}
  /// Clears the value of `invoiceID`. Subsequent reads from it will return its default value.
  public mutating func clearInvoiceID() {_uniqueStorage()._invoiceID = nil}

  public var sourceTag: Org_Xrpl_Rpc_V1_SourceTag {
    get {return _storage._sourceTag ?? Org_Xrpl_Rpc_V1_SourceTag()}
    set {_uniqueStorage()._sourceTag = newValue}
  }
  /// Returns true if `sourceTag` has been explicitly set.
  public var hasSourceTag: Bool {return _storage._sourceTag != nil}
  /// Clears the value of `sourceTag`. Subsequent reads from it will return its default value.
  public mutating func clearSourceTag() {_uniqueStorage()._sourceTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 7
public struct Org_Xrpl_Rpc_V1_DepositPreauthObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _storage._account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {_uniqueStorage()._account = nil}

  public var authorize: Org_Xrpl_Rpc_V1_Authorize {
    get {return _storage._authorize ?? Org_Xrpl_Rpc_V1_Authorize()}
    set {_uniqueStorage()._authorize = newValue}
  }
  /// Returns true if `authorize` has been explicitly set.
  public var hasAuthorize: Bool {return _storage._authorize != nil}
  /// Clears the value of `authorize`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorize() {_uniqueStorage()._authorize = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _storage._ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_uniqueStorage()._ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return _storage._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {_uniqueStorage()._ownerNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 11
public struct Org_Xrpl_Rpc_V1_DirectoryNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var rootIndex: Org_Xrpl_Rpc_V1_RootIndex {
    get {return _storage._rootIndex ?? Org_Xrpl_Rpc_V1_RootIndex()}
    set {_uniqueStorage()._rootIndex = newValue}
  }
  /// Returns true if `rootIndex` has been explicitly set.
  public var hasRootIndex: Bool {return _storage._rootIndex != nil}
  /// Clears the value of `rootIndex`. Subsequent reads from it will return its default value.
  public mutating func clearRootIndex() {_uniqueStorage()._rootIndex = nil}

  public var indexes: [Org_Xrpl_Rpc_V1_Index] {
    get {return _storage._indexes}
    set {_uniqueStorage()._indexes = newValue}
  }

  public var indexNext: Org_Xrpl_Rpc_V1_IndexNext {
    get {return _storage._indexNext ?? Org_Xrpl_Rpc_V1_IndexNext()}
    set {_uniqueStorage()._indexNext = newValue}
  }
  /// Returns true if `indexNext` has been explicitly set.
  public var hasIndexNext: Bool {return _storage._indexNext != nil}
  /// Clears the value of `indexNext`. Subsequent reads from it will return its default value.
  public mutating func clearIndexNext() {_uniqueStorage()._indexNext = nil}

  public var indexPrevious: Org_Xrpl_Rpc_V1_IndexPrevious {
    get {return _storage._indexPrevious ?? Org_Xrpl_Rpc_V1_IndexPrevious()}
    set {_uniqueStorage()._indexPrevious = newValue}
  }
  /// Returns true if `indexPrevious` has been explicitly set.
  public var hasIndexPrevious: Bool {return _storage._indexPrevious != nil}
  /// Clears the value of `indexPrevious`. Subsequent reads from it will return its default value.
  public mutating func clearIndexPrevious() {_uniqueStorage()._indexPrevious = nil}

  public var owner: Org_Xrpl_Rpc_V1_Owner {
    get {return _storage._owner ?? Org_Xrpl_Rpc_V1_Owner()}
    set {_uniqueStorage()._owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return _storage._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {_uniqueStorage()._owner = nil}

  public var takerPaysCurrency: Org_Xrpl_Rpc_V1_TakerPaysCurrency {
    get {return _storage._takerPaysCurrency ?? Org_Xrpl_Rpc_V1_TakerPaysCurrency()}
    set {_uniqueStorage()._takerPaysCurrency = newValue}
  }
  /// Returns true if `takerPaysCurrency` has been explicitly set.
  public var hasTakerPaysCurrency: Bool {return _storage._takerPaysCurrency != nil}
  /// Clears the value of `takerPaysCurrency`. Subsequent reads from it will return its default value.
  public mutating func clearTakerPaysCurrency() {_uniqueStorage()._takerPaysCurrency = nil}

  public var takerPaysIssuer: Org_Xrpl_Rpc_V1_TakerPaysIssuer {
    get {return _storage._takerPaysIssuer ?? Org_Xrpl_Rpc_V1_TakerPaysIssuer()}
    set {_uniqueStorage()._takerPaysIssuer = newValue}
  }
  /// Returns true if `takerPaysIssuer` has been explicitly set.
  public var hasTakerPaysIssuer: Bool {return _storage._takerPaysIssuer != nil}
  /// Clears the value of `takerPaysIssuer`. Subsequent reads from it will return its default value.
  public mutating func clearTakerPaysIssuer() {_uniqueStorage()._takerPaysIssuer = nil}

  public var takerGetsCurrency: Org_Xrpl_Rpc_V1_TakerGetsCurreny {
    get {return _storage._takerGetsCurrency ?? Org_Xrpl_Rpc_V1_TakerGetsCurreny()}
    set {_uniqueStorage()._takerGetsCurrency = newValue}
  }
  /// Returns true if `takerGetsCurrency` has been explicitly set.
  public var hasTakerGetsCurrency: Bool {return _storage._takerGetsCurrency != nil}
  /// Clears the value of `takerGetsCurrency`. Subsequent reads from it will return its default value.
  public mutating func clearTakerGetsCurrency() {_uniqueStorage()._takerGetsCurrency = nil}

  public var takerGetsIssuer: Org_Xrpl_Rpc_V1_TakerGetsIssuer {
    get {return _storage._takerGetsIssuer ?? Org_Xrpl_Rpc_V1_TakerGetsIssuer()}
    set {_uniqueStorage()._takerGetsIssuer = newValue}
  }
  /// Returns true if `takerGetsIssuer` has been explicitly set.
  public var hasTakerGetsIssuer: Bool {return _storage._takerGetsIssuer != nil}
  /// Clears the value of `takerGetsIssuer`. Subsequent reads from it will return its default value.
  public mutating func clearTakerGetsIssuer() {_uniqueStorage()._takerGetsIssuer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 14
public struct Org_Xrpl_Rpc_V1_Escrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _storage._account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {_uniqueStorage()._account = nil}

  public var destination: Org_Xrpl_Rpc_V1_Destination {
    get {return _storage._destination ?? Org_Xrpl_Rpc_V1_Destination()}
    set {_uniqueStorage()._destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return _storage._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {_uniqueStorage()._destination = nil}

  public var amount: Org_Xrpl_Rpc_V1_Amount {
    get {return _storage._amount ?? Org_Xrpl_Rpc_V1_Amount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {_uniqueStorage()._amount = nil}

  public var condition: Org_Xrpl_Rpc_V1_Condition {
    get {return _storage._condition ?? Org_Xrpl_Rpc_V1_Condition()}
    set {_uniqueStorage()._condition = newValue}
  }
  /// Returns true if `condition` has been explicitly set.
  public var hasCondition: Bool {return _storage._condition != nil}
  /// Clears the value of `condition`. Subsequent reads from it will return its default value.
  public mutating func clearCondition() {_uniqueStorage()._condition = nil}

  public var cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter {
    get {return _storage._cancelAfter ?? Org_Xrpl_Rpc_V1_CancelAfter()}
    set {_uniqueStorage()._cancelAfter = newValue}
  }
  /// Returns true if `cancelAfter` has been explicitly set.
  public var hasCancelAfter: Bool {return _storage._cancelAfter != nil}
  /// Clears the value of `cancelAfter`. Subsequent reads from it will return its default value.
  public mutating func clearCancelAfter() {_uniqueStorage()._cancelAfter = nil}

  public var finishAfter: Org_Xrpl_Rpc_V1_FinishAfter {
    get {return _storage._finishAfter ?? Org_Xrpl_Rpc_V1_FinishAfter()}
    set {_uniqueStorage()._finishAfter = newValue}
  }
  /// Returns true if `finishAfter` has been explicitly set.
  public var hasFinishAfter: Bool {return _storage._finishAfter != nil}
  /// Clears the value of `finishAfter`. Subsequent reads from it will return its default value.
  public mutating func clearFinishAfter() {_uniqueStorage()._finishAfter = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var sourceTag: Org_Xrpl_Rpc_V1_SourceTag {
    get {return _storage._sourceTag ?? Org_Xrpl_Rpc_V1_SourceTag()}
    set {_uniqueStorage()._sourceTag = newValue}
  }
  /// Returns true if `sourceTag` has been explicitly set.
  public var hasSourceTag: Bool {return _storage._sourceTag != nil}
  /// Clears the value of `sourceTag`. Subsequent reads from it will return its default value.
  public mutating func clearSourceTag() {_uniqueStorage()._sourceTag = nil}

  public var destinationTag: Org_Xrpl_Rpc_V1_DestinationTag {
    get {return _storage._destinationTag ?? Org_Xrpl_Rpc_V1_DestinationTag()}
    set {_uniqueStorage()._destinationTag = newValue}
  }
  /// Returns true if `destinationTag` has been explicitly set.
  public var hasDestinationTag: Bool {return _storage._destinationTag != nil}
  /// Clears the value of `destinationTag`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationTag() {_uniqueStorage()._destinationTag = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _storage._ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_uniqueStorage()._ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return _storage._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {_uniqueStorage()._ownerNode = nil}

  public var destinationNode: Org_Xrpl_Rpc_V1_DestinationNode {
    get {return _storage._destinationNode ?? Org_Xrpl_Rpc_V1_DestinationNode()}
    set {_uniqueStorage()._destinationNode = newValue}
  }
  /// Returns true if `destinationNode` has been explicitly set.
  public var hasDestinationNode: Bool {return _storage._destinationNode != nil}
  /// Clears the value of `destinationNode`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationNode() {_uniqueStorage()._destinationNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 6
public struct Org_Xrpl_Rpc_V1_FeeSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var baseFee: Org_Xrpl_Rpc_V1_BaseFee {
    get {return _storage._baseFee ?? Org_Xrpl_Rpc_V1_BaseFee()}
    set {_uniqueStorage()._baseFee = newValue}
  }
  /// Returns true if `baseFee` has been explicitly set.
  public var hasBaseFee: Bool {return _storage._baseFee != nil}
  /// Clears the value of `baseFee`. Subsequent reads from it will return its default value.
  public mutating func clearBaseFee() {_uniqueStorage()._baseFee = nil}

  public var referenceFeeUnits: Org_Xrpl_Rpc_V1_ReferenceFeeUnits {
    get {return _storage._referenceFeeUnits ?? Org_Xrpl_Rpc_V1_ReferenceFeeUnits()}
    set {_uniqueStorage()._referenceFeeUnits = newValue}
  }
  /// Returns true if `referenceFeeUnits` has been explicitly set.
  public var hasReferenceFeeUnits: Bool {return _storage._referenceFeeUnits != nil}
  /// Clears the value of `referenceFeeUnits`. Subsequent reads from it will return its default value.
  public mutating func clearReferenceFeeUnits() {_uniqueStorage()._referenceFeeUnits = nil}

  public var reserveBase: Org_Xrpl_Rpc_V1_ReserveBase {
    get {return _storage._reserveBase ?? Org_Xrpl_Rpc_V1_ReserveBase()}
    set {_uniqueStorage()._reserveBase = newValue}
  }
  /// Returns true if `reserveBase` has been explicitly set.
  public var hasReserveBase: Bool {return _storage._reserveBase != nil}
  /// Clears the value of `reserveBase`. Subsequent reads from it will return its default value.
  public mutating func clearReserveBase() {_uniqueStorage()._reserveBase = nil}

  public var reserveIncrement: Org_Xrpl_Rpc_V1_ReserveIncrement {
    get {return _storage._reserveIncrement ?? Org_Xrpl_Rpc_V1_ReserveIncrement()}
    set {_uniqueStorage()._reserveIncrement = newValue}
  }
  /// Returns true if `reserveIncrement` has been explicitly set.
  public var hasReserveIncrement: Bool {return _storage._reserveIncrement != nil}
  /// Clears the value of `reserveIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearReserveIncrement() {_uniqueStorage()._reserveIncrement = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 4
public struct Org_Xrpl_Rpc_V1_LedgerHashes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lastLedgerSequence: Org_Xrpl_Rpc_V1_LastLedgerSequence {
    get {return _storage._lastLedgerSequence ?? Org_Xrpl_Rpc_V1_LastLedgerSequence()}
    set {_uniqueStorage()._lastLedgerSequence = newValue}
  }
  /// Returns true if `lastLedgerSequence` has been explicitly set.
  public var hasLastLedgerSequence: Bool {return _storage._lastLedgerSequence != nil}
  /// Clears the value of `lastLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearLastLedgerSequence() {_uniqueStorage()._lastLedgerSequence = nil}

  public var hashes: [Org_Xrpl_Rpc_V1_Hash] {
    get {return _storage._hashes}
    set {_uniqueStorage()._hashes = newValue}
  }

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 12
public struct Org_Xrpl_Rpc_V1_Offer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _storage._account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {_uniqueStorage()._account = nil}

  public var sequence: Org_Xrpl_Rpc_V1_Sequence {
    get {return _storage._sequence ?? Org_Xrpl_Rpc_V1_Sequence()}
    set {_uniqueStorage()._sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  public var hasSequence: Bool {return _storage._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  public mutating func clearSequence() {_uniqueStorage()._sequence = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var takerPays: Org_Xrpl_Rpc_V1_TakerPays {
    get {return _storage._takerPays ?? Org_Xrpl_Rpc_V1_TakerPays()}
    set {_uniqueStorage()._takerPays = newValue}
  }
  /// Returns true if `takerPays` has been explicitly set.
  public var hasTakerPays: Bool {return _storage._takerPays != nil}
  /// Clears the value of `takerPays`. Subsequent reads from it will return its default value.
  public mutating func clearTakerPays() {_uniqueStorage()._takerPays = nil}

  public var takerGets: Org_Xrpl_Rpc_V1_TakerGets {
    get {return _storage._takerGets ?? Org_Xrpl_Rpc_V1_TakerGets()}
    set {_uniqueStorage()._takerGets = newValue}
  }
  /// Returns true if `takerGets` has been explicitly set.
  public var hasTakerGets: Bool {return _storage._takerGets != nil}
  /// Clears the value of `takerGets`. Subsequent reads from it will return its default value.
  public mutating func clearTakerGets() {_uniqueStorage()._takerGets = nil}

  public var bookDirectory: Org_Xrpl_Rpc_V1_BookDirectory {
    get {return _storage._bookDirectory ?? Org_Xrpl_Rpc_V1_BookDirectory()}
    set {_uniqueStorage()._bookDirectory = newValue}
  }
  /// Returns true if `bookDirectory` has been explicitly set.
  public var hasBookDirectory: Bool {return _storage._bookDirectory != nil}
  /// Clears the value of `bookDirectory`. Subsequent reads from it will return its default value.
  public mutating func clearBookDirectory() {_uniqueStorage()._bookDirectory = nil}

  public var bookNode: Org_Xrpl_Rpc_V1_BookNode {
    get {return _storage._bookNode ?? Org_Xrpl_Rpc_V1_BookNode()}
    set {_uniqueStorage()._bookNode = newValue}
  }
  /// Returns true if `bookNode` has been explicitly set.
  public var hasBookNode: Bool {return _storage._bookNode != nil}
  /// Clears the value of `bookNode`. Subsequent reads from it will return its default value.
  public mutating func clearBookNode() {_uniqueStorage()._bookNode = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _storage._ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_uniqueStorage()._ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return _storage._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {_uniqueStorage()._ownerNode = nil}

  public var expiration: Org_Xrpl_Rpc_V1_Expiration {
    get {return _storage._expiration ?? Org_Xrpl_Rpc_V1_Expiration()}
    set {_uniqueStorage()._expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  public var hasExpiration: Bool {return _storage._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  public mutating func clearExpiration() {_uniqueStorage()._expiration = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 13
public struct Org_Xrpl_Rpc_V1_PayChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _storage._account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {_uniqueStorage()._account = nil}

  public var destination: Org_Xrpl_Rpc_V1_Destination {
    get {return _storage._destination ?? Org_Xrpl_Rpc_V1_Destination()}
    set {_uniqueStorage()._destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return _storage._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {_uniqueStorage()._destination = nil}

  public var amount: Org_Xrpl_Rpc_V1_Amount {
    get {return _storage._amount ?? Org_Xrpl_Rpc_V1_Amount()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {_uniqueStorage()._amount = nil}

  public var balance: Org_Xrpl_Rpc_V1_Balance {
    get {return _storage._balance ?? Org_Xrpl_Rpc_V1_Balance()}
    set {_uniqueStorage()._balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool {return _storage._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() {_uniqueStorage()._balance = nil}

  public var publicKey: Org_Xrpl_Rpc_V1_PublicKey {
    get {return _storage._publicKey ?? Org_Xrpl_Rpc_V1_PublicKey()}
    set {_uniqueStorage()._publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  public var hasPublicKey: Bool {return _storage._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  public mutating func clearPublicKey() {_uniqueStorage()._publicKey = nil}

  public var settleDelay: Org_Xrpl_Rpc_V1_SettleDelay {
    get {return _storage._settleDelay ?? Org_Xrpl_Rpc_V1_SettleDelay()}
    set {_uniqueStorage()._settleDelay = newValue}
  }
  /// Returns true if `settleDelay` has been explicitly set.
  public var hasSettleDelay: Bool {return _storage._settleDelay != nil}
  /// Clears the value of `settleDelay`. Subsequent reads from it will return its default value.
  public mutating func clearSettleDelay() {_uniqueStorage()._settleDelay = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _storage._ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_uniqueStorage()._ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return _storage._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {_uniqueStorage()._ownerNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var expiration: Org_Xrpl_Rpc_V1_Expiration {
    get {return _storage._expiration ?? Org_Xrpl_Rpc_V1_Expiration()}
    set {_uniqueStorage()._expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  public var hasExpiration: Bool {return _storage._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  public mutating func clearExpiration() {_uniqueStorage()._expiration = nil}

  public var cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter {
    get {return _storage._cancelAfter ?? Org_Xrpl_Rpc_V1_CancelAfter()}
    set {_uniqueStorage()._cancelAfter = newValue}
  }
  /// Returns true if `cancelAfter` has been explicitly set.
  public var hasCancelAfter: Bool {return _storage._cancelAfter != nil}
  /// Clears the value of `cancelAfter`. Subsequent reads from it will return its default value.
  public mutating func clearCancelAfter() {_uniqueStorage()._cancelAfter = nil}

  public var sourceTag: Org_Xrpl_Rpc_V1_SourceTag {
    get {return _storage._sourceTag ?? Org_Xrpl_Rpc_V1_SourceTag()}
    set {_uniqueStorage()._sourceTag = newValue}
  }
  /// Returns true if `sourceTag` has been explicitly set.
  public var hasSourceTag: Bool {return _storage._sourceTag != nil}
  /// Clears the value of `sourceTag`. Subsequent reads from it will return its default value.
  public mutating func clearSourceTag() {_uniqueStorage()._sourceTag = nil}

  public var destinationTag: Org_Xrpl_Rpc_V1_DestinationTag {
    get {return _storage._destinationTag ?? Org_Xrpl_Rpc_V1_DestinationTag()}
    set {_uniqueStorage()._destinationTag = newValue}
  }
  /// Returns true if `destinationTag` has been explicitly set.
  public var hasDestinationTag: Bool {return _storage._destinationTag != nil}
  /// Clears the value of `destinationTag`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationTag() {_uniqueStorage()._destinationTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 13
public struct Org_Xrpl_Rpc_V1_RippleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var balance: Org_Xrpl_Rpc_V1_Balance {
    get {return _storage._balance ?? Org_Xrpl_Rpc_V1_Balance()}
    set {_uniqueStorage()._balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool {return _storage._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() {_uniqueStorage()._balance = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var lowLimit: Org_Xrpl_Rpc_V1_LowLimit {
    get {return _storage._lowLimit ?? Org_Xrpl_Rpc_V1_LowLimit()}
    set {_uniqueStorage()._lowLimit = newValue}
  }
  /// Returns true if `lowLimit` has been explicitly set.
  public var hasLowLimit: Bool {return _storage._lowLimit != nil}
  /// Clears the value of `lowLimit`. Subsequent reads from it will return its default value.
  public mutating func clearLowLimit() {_uniqueStorage()._lowLimit = nil}

  public var highLimit: Org_Xrpl_Rpc_V1_HighLimit {
    get {return _storage._highLimit ?? Org_Xrpl_Rpc_V1_HighLimit()}
    set {_uniqueStorage()._highLimit = newValue}
  }
  /// Returns true if `highLimit` has been explicitly set.
  public var hasHighLimit: Bool {return _storage._highLimit != nil}
  /// Clears the value of `highLimit`. Subsequent reads from it will return its default value.
  public mutating func clearHighLimit() {_uniqueStorage()._highLimit = nil}

  public var lowNode: Org_Xrpl_Rpc_V1_LowNode {
    get {return _storage._lowNode ?? Org_Xrpl_Rpc_V1_LowNode()}
    set {_uniqueStorage()._lowNode = newValue}
  }
  /// Returns true if `lowNode` has been explicitly set.
  public var hasLowNode: Bool {return _storage._lowNode != nil}
  /// Clears the value of `lowNode`. Subsequent reads from it will return its default value.
  public mutating func clearLowNode() {_uniqueStorage()._lowNode = nil}

  public var highNode: Org_Xrpl_Rpc_V1_HighNode {
    get {return _storage._highNode ?? Org_Xrpl_Rpc_V1_HighNode()}
    set {_uniqueStorage()._highNode = newValue}
  }
  /// Returns true if `highNode` has been explicitly set.
  public var hasHighNode: Bool {return _storage._highNode != nil}
  /// Clears the value of `highNode`. Subsequent reads from it will return its default value.
  public mutating func clearHighNode() {_uniqueStorage()._highNode = nil}

  public var lowQualityIn: Org_Xrpl_Rpc_V1_LowQualityIn {
    get {return _storage._lowQualityIn ?? Org_Xrpl_Rpc_V1_LowQualityIn()}
    set {_uniqueStorage()._lowQualityIn = newValue}
  }
  /// Returns true if `lowQualityIn` has been explicitly set.
  public var hasLowQualityIn: Bool {return _storage._lowQualityIn != nil}
  /// Clears the value of `lowQualityIn`. Subsequent reads from it will return its default value.
  public mutating func clearLowQualityIn() {_uniqueStorage()._lowQualityIn = nil}

  public var lowQualityOut: Org_Xrpl_Rpc_V1_LowQualityOut {
    get {return _storage._lowQualityOut ?? Org_Xrpl_Rpc_V1_LowQualityOut()}
    set {_uniqueStorage()._lowQualityOut = newValue}
  }
  /// Returns true if `lowQualityOut` has been explicitly set.
  public var hasLowQualityOut: Bool {return _storage._lowQualityOut != nil}
  /// Clears the value of `lowQualityOut`. Subsequent reads from it will return its default value.
  public mutating func clearLowQualityOut() {_uniqueStorage()._lowQualityOut = nil}

  public var highQualityIn: Org_Xrpl_Rpc_V1_HighQualityIn {
    get {return _storage._highQualityIn ?? Org_Xrpl_Rpc_V1_HighQualityIn()}
    set {_uniqueStorage()._highQualityIn = newValue}
  }
  /// Returns true if `highQualityIn` has been explicitly set.
  public var hasHighQualityIn: Bool {return _storage._highQualityIn != nil}
  /// Clears the value of `highQualityIn`. Subsequent reads from it will return its default value.
  public mutating func clearHighQualityIn() {_uniqueStorage()._highQualityIn = nil}

  public var highQualityOut: Org_Xrpl_Rpc_V1_HighQualityOut {
    get {return _storage._highQualityOut ?? Org_Xrpl_Rpc_V1_HighQualityOut()}
    set {_uniqueStorage()._highQualityOut = newValue}
  }
  /// Returns true if `highQualityOut` has been explicitly set.
  public var hasHighQualityOut: Bool {return _storage._highQualityOut != nil}
  /// Clears the value of `highQualityOut`. Subsequent reads from it will return its default value.
  public mutating func clearHighQualityOut() {_uniqueStorage()._highQualityOut = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 8
public struct Org_Xrpl_Rpc_V1_SignerList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _storage._flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _storage._previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_uniqueStorage()._previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return _storage._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {_uniqueStorage()._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _storage._previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_uniqueStorage()._previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return _storage._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {_uniqueStorage()._previousTransactionLedgerSequence = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _storage._ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_uniqueStorage()._ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return _storage._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {_uniqueStorage()._ownerNode = nil}

  public var signerEntries: [Org_Xrpl_Rpc_V1_SignerEntry] {
    get {return _storage._signerEntries}
    set {_uniqueStorage()._signerEntries = newValue}
  }

  public var signerListID: Org_Xrpl_Rpc_V1_SignerListID {
    get {return _storage._signerListID ?? Org_Xrpl_Rpc_V1_SignerListID()}
    set {_uniqueStorage()._signerListID = newValue}
  }
  /// Returns true if `signerListID` has been explicitly set.
  public var hasSignerListID: Bool {return _storage._signerListID != nil}
  /// Clears the value of `signerListID`. Subsequent reads from it will return its default value.
  public mutating func clearSignerListID() {_uniqueStorage()._signerListID = nil}

  public var signerQuorum: Org_Xrpl_Rpc_V1_SignerQuorum {
    get {return _storage._signerQuorum ?? Org_Xrpl_Rpc_V1_SignerQuorum()}
    set {_uniqueStorage()._signerQuorum = newValue}
  }
  /// Returns true if `signerQuorum` has been explicitly set.
  public var hasSignerQuorum: Bool {return _storage._signerQuorum != nil}
  /// Clears the value of `signerQuorum`. Subsequent reads from it will return its default value.
  public mutating func clearSignerQuorum() {_uniqueStorage()._signerQuorum = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.xrpl.rpc.v1"

extension Org_Xrpl_Rpc_V1_LedgerEntryType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEDGER_ENTRY_TYPE_UNSPECIFIED"),
    1: .same(proto: "LEDGER_ENTRY_TYPE_ACCOUNT_ROOT"),
    2: .same(proto: "LEDGER_ENTRY_TYPE_AMENDMENTS"),
    3: .same(proto: "LEDGER_ENTRY_TYPE_CHECK"),
    4: .same(proto: "LEDGER_ENTRY_TYPE_DEPOSIT_PREAUTH"),
    5: .same(proto: "LEDGER_ENTRY_TYPE_DIRECTORY_NODE"),
    6: .same(proto: "LEDGER_ENTRY_TYPE_ESCROW"),
    7: .same(proto: "LEDGER_ENTRY_TYPE_FEE_SETTINGS"),
    8: .same(proto: "LEDGER_ENTRY_TYPE_LEDGER_HASHES"),
    9: .same(proto: "LEDGER_ENTRY_TYPE_OFFER"),
    10: .same(proto: "LEDGER_ENTRY_TYPE_PAY_CHANNEL"),
    11: .same(proto: "LEDGER_ENTRY_TYPE_RIPPLE_STATE"),
    12: .same(proto: "LEDGER_ENTRY_TYPE_SIGNER_LIST"),
  ]
}

extension Org_Xrpl_Rpc_V1_LedgerObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LedgerObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_root"),
    2: .same(proto: "amendments"),
    3: .same(proto: "check"),
    4: .standard(proto: "deposit_preauth"),
    5: .standard(proto: "directory_node"),
    6: .same(proto: "escrow"),
    7: .standard(proto: "fee_settings"),
    8: .standard(proto: "ledger_hashes"),
    9: .same(proto: "offer"),
    10: .standard(proto: "pay_channel"),
    11: .standard(proto: "ripple_state"),
    12: .standard(proto: "signer_list"),
  ]

  fileprivate class _StorageClass {
    var _object: Org_Xrpl_Rpc_V1_LedgerObject.OneOf_Object?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _object = source._object
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Org_Xrpl_Rpc_V1_AccountRoot?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .accountRoot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .accountRoot(v)}
        case 2:
          var v: Org_Xrpl_Rpc_V1_Amendments?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .amendments(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .amendments(v)}
        case 3:
          var v: Org_Xrpl_Rpc_V1_Check?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .check(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .check(v)}
        case 4:
          var v: Org_Xrpl_Rpc_V1_DepositPreauthObject?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .depositPreauth(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .depositPreauth(v)}
        case 5:
          var v: Org_Xrpl_Rpc_V1_DirectoryNode?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .directoryNode(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .directoryNode(v)}
        case 6:
          var v: Org_Xrpl_Rpc_V1_Escrow?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .escrow(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .escrow(v)}
        case 7:
          var v: Org_Xrpl_Rpc_V1_FeeSettings?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .feeSettings(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .feeSettings(v)}
        case 8:
          var v: Org_Xrpl_Rpc_V1_LedgerHashes?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .ledgerHashes(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .ledgerHashes(v)}
        case 9:
          var v: Org_Xrpl_Rpc_V1_Offer?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .offer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .offer(v)}
        case 10:
          var v: Org_Xrpl_Rpc_V1_PayChannel?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .payChannel(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .payChannel(v)}
        case 11:
          var v: Org_Xrpl_Rpc_V1_RippleState?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .rippleState(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .rippleState(v)}
        case 12:
          var v: Org_Xrpl_Rpc_V1_SignerList?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .signerList(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .signerList(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._object {
      case .accountRoot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .amendments(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .check(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .depositPreauth(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .directoryNode(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .escrow(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .feeSettings(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .ledgerHashes(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .offer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .payChannel(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .rippleState(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .signerList(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_LedgerObject, rhs: Org_Xrpl_Rpc_V1_LedgerObject) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._object != rhs_storage._object {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_AccountRoot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountRoot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "balance"),
    3: .same(proto: "sequence"),
    4: .same(proto: "flags"),
    5: .standard(proto: "owner_count"),
    6: .standard(proto: "previous_transaction_id"),
    7: .standard(proto: "previous_transaction_ledger_sequence"),
    8: .standard(proto: "account_transaction_id"),
    9: .same(proto: "domain"),
    10: .standard(proto: "email_hash"),
    11: .standard(proto: "message_key"),
    12: .standard(proto: "regular_key"),
    13: .standard(proto: "tick_size"),
    14: .standard(proto: "transfer_rate"),
  ]

  fileprivate class _StorageClass {
    var _account: Org_Xrpl_Rpc_V1_Account? = nil
    var _balance: Org_Xrpl_Rpc_V1_Balance? = nil
    var _sequence: Org_Xrpl_Rpc_V1_Sequence? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _ownerCount: Org_Xrpl_Rpc_V1_OwnerCount? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
    var _accountTransactionID: Org_Xrpl_Rpc_V1_AccountTransactionID? = nil
    var _domain: Org_Xrpl_Rpc_V1_Domain? = nil
    var _emailHash: Org_Xrpl_Rpc_V1_EmailHash? = nil
    var _messageKey: Org_Xrpl_Rpc_V1_MessageKey? = nil
    var _regularKey: Org_Xrpl_Rpc_V1_RegularKey? = nil
    var _tickSize: Org_Xrpl_Rpc_V1_TickSize? = nil
    var _transferRate: Org_Xrpl_Rpc_V1_TransferRate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _balance = source._balance
      _sequence = source._sequence
      _flags = source._flags
      _ownerCount = source._ownerCount
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
      _accountTransactionID = source._accountTransactionID
      _domain = source._domain
      _emailHash = source._emailHash
      _messageKey = source._messageKey
      _regularKey = source._regularKey
      _tickSize = source._tickSize
      _transferRate = source._transferRate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._balance)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sequence)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._ownerCount)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._accountTransactionID)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._domain)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._emailHash)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._messageKey)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._regularKey)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._tickSize)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._transferRate)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._balance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._sequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._ownerCount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._accountTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._domain {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._emailHash {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._messageKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._regularKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._tickSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._transferRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_AccountRoot, rhs: Org_Xrpl_Rpc_V1_AccountRoot) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._balance != rhs_storage._balance {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._ownerCount != rhs_storage._ownerCount {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        if _storage._accountTransactionID != rhs_storage._accountTransactionID {return false}
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._emailHash != rhs_storage._emailHash {return false}
        if _storage._messageKey != rhs_storage._messageKey {return false}
        if _storage._regularKey != rhs_storage._regularKey {return false}
        if _storage._tickSize != rhs_storage._tickSize {return false}
        if _storage._transferRate != rhs_storage._transferRate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Amendments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Amendments"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amendments"),
    2: .same(proto: "majorities"),
    3: .same(proto: "flags"),
  ]

  fileprivate class _StorageClass {
    var _amendments: [Org_Xrpl_Rpc_V1_Amendments.Amendment] = []
    var _majorities: [Org_Xrpl_Rpc_V1_Amendments.Majority] = []
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _amendments = source._amendments
      _majorities = source._majorities
      _flags = source._flags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._amendments)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._majorities)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._flags)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._amendments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._amendments, fieldNumber: 1)
      }
      if !_storage._majorities.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._majorities, fieldNumber: 2)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Amendments, rhs: Org_Xrpl_Rpc_V1_Amendments) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._amendments != rhs_storage._amendments {return false}
        if _storage._majorities != rhs_storage._majorities {return false}
        if _storage._flags != rhs_storage._flags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Amendments.Amendment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Org_Xrpl_Rpc_V1_Amendments.protoMessageName + ".Amendment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Amendments.Amendment, rhs: Org_Xrpl_Rpc_V1_Amendments.Amendment) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Amendments.Majority: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Org_Xrpl_Rpc_V1_Amendments.protoMessageName + ".Majority"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amendment"),
    2: .standard(proto: "close_time"),
  ]

  fileprivate class _StorageClass {
    var _amendment: Org_Xrpl_Rpc_V1_Amendments.Amendment? = nil
    var _closeTime: Org_Xrpl_Rpc_V1_CloseTime? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _amendment = source._amendment
      _closeTime = source._closeTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._amendment)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._closeTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._amendment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._closeTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Amendments.Majority, rhs: Org_Xrpl_Rpc_V1_Amendments.Majority) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._amendment != rhs_storage._amendment {return false}
        if _storage._closeTime != rhs_storage._closeTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Check: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Check"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "destination"),
    3: .same(proto: "flags"),
    4: .standard(proto: "owner_node"),
    5: .standard(proto: "previous_transaction_id"),
    6: .standard(proto: "previous_transaction_ledger_sequence"),
    7: .standard(proto: "send_max"),
    8: .same(proto: "sequence"),
    9: .standard(proto: "destination_node"),
    10: .standard(proto: "destination_tag"),
    11: .same(proto: "expiration"),
    12: .standard(proto: "invoice_id"),
    13: .standard(proto: "source_tag"),
  ]

  fileprivate class _StorageClass {
    var _account: Org_Xrpl_Rpc_V1_Account? = nil
    var _destination: Org_Xrpl_Rpc_V1_Destination? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
    var _sendMax: Org_Xrpl_Rpc_V1_SendMax? = nil
    var _sequence: Org_Xrpl_Rpc_V1_Sequence? = nil
    var _destinationNode: Org_Xrpl_Rpc_V1_DestinationNode? = nil
    var _destinationTag: Org_Xrpl_Rpc_V1_DestinationTag? = nil
    var _expiration: Org_Xrpl_Rpc_V1_Expiration? = nil
    var _invoiceID: Org_Xrpl_Rpc_V1_InvoiceID? = nil
    var _sourceTag: Org_Xrpl_Rpc_V1_SourceTag? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _destination = source._destination
      _flags = source._flags
      _ownerNode = source._ownerNode
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
      _sendMax = source._sendMax
      _sequence = source._sequence
      _destinationNode = source._destinationNode
      _destinationTag = source._destinationTag
      _expiration = source._expiration
      _invoiceID = source._invoiceID
      _sourceTag = source._sourceTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._destination)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._ownerNode)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._sendMax)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._sequence)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._destinationNode)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._destinationTag)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._expiration)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._invoiceID)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._sourceTag)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._destination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._ownerNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._sendMax {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._sequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._destinationNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._destinationTag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._expiration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._invoiceID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._sourceTag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Check, rhs: Org_Xrpl_Rpc_V1_Check) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._ownerNode != rhs_storage._ownerNode {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        if _storage._sendMax != rhs_storage._sendMax {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._destinationNode != rhs_storage._destinationNode {return false}
        if _storage._destinationTag != rhs_storage._destinationTag {return false}
        if _storage._expiration != rhs_storage._expiration {return false}
        if _storage._invoiceID != rhs_storage._invoiceID {return false}
        if _storage._sourceTag != rhs_storage._sourceTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_DepositPreauthObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DepositPreauthObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "authorize"),
    3: .same(proto: "flags"),
    4: .standard(proto: "owner_node"),
    5: .standard(proto: "previous_transaction_id"),
    6: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  fileprivate class _StorageClass {
    var _account: Org_Xrpl_Rpc_V1_Account? = nil
    var _authorize: Org_Xrpl_Rpc_V1_Authorize? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _authorize = source._authorize
      _flags = source._flags
      _ownerNode = source._ownerNode
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._authorize)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._ownerNode)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._authorize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._ownerNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_DepositPreauthObject, rhs: Org_Xrpl_Rpc_V1_DepositPreauthObject) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._authorize != rhs_storage._authorize {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._ownerNode != rhs_storage._ownerNode {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_DirectoryNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectoryNode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "root_index"),
    3: .same(proto: "indexes"),
    4: .standard(proto: "index_next"),
    5: .standard(proto: "index_previous"),
    6: .same(proto: "owner"),
    7: .standard(proto: "taker_pays_currency"),
    8: .standard(proto: "taker_pays_issuer"),
    9: .standard(proto: "taker_gets_currency"),
    10: .standard(proto: "taker_gets_issuer"),
  ]

  fileprivate class _StorageClass {
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _rootIndex: Org_Xrpl_Rpc_V1_RootIndex? = nil
    var _indexes: [Org_Xrpl_Rpc_V1_Index] = []
    var _indexNext: Org_Xrpl_Rpc_V1_IndexNext? = nil
    var _indexPrevious: Org_Xrpl_Rpc_V1_IndexPrevious? = nil
    var _owner: Org_Xrpl_Rpc_V1_Owner? = nil
    var _takerPaysCurrency: Org_Xrpl_Rpc_V1_TakerPaysCurrency? = nil
    var _takerPaysIssuer: Org_Xrpl_Rpc_V1_TakerPaysIssuer? = nil
    var _takerGetsCurrency: Org_Xrpl_Rpc_V1_TakerGetsCurreny? = nil
    var _takerGetsIssuer: Org_Xrpl_Rpc_V1_TakerGetsIssuer? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _flags = source._flags
      _rootIndex = source._rootIndex
      _indexes = source._indexes
      _indexNext = source._indexNext
      _indexPrevious = source._indexPrevious
      _owner = source._owner
      _takerPaysCurrency = source._takerPaysCurrency
      _takerPaysIssuer = source._takerPaysIssuer
      _takerGetsCurrency = source._takerGetsCurrency
      _takerGetsIssuer = source._takerGetsIssuer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._rootIndex)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._indexes)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._indexNext)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._indexPrevious)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._owner)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._takerPaysCurrency)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._takerPaysIssuer)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._takerGetsCurrency)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._takerGetsIssuer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._rootIndex {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._indexes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._indexes, fieldNumber: 3)
      }
      if let v = _storage._indexNext {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._indexPrevious {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._owner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._takerPaysCurrency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._takerPaysIssuer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._takerGetsCurrency {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._takerGetsIssuer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_DirectoryNode, rhs: Org_Xrpl_Rpc_V1_DirectoryNode) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._rootIndex != rhs_storage._rootIndex {return false}
        if _storage._indexes != rhs_storage._indexes {return false}
        if _storage._indexNext != rhs_storage._indexNext {return false}
        if _storage._indexPrevious != rhs_storage._indexPrevious {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._takerPaysCurrency != rhs_storage._takerPaysCurrency {return false}
        if _storage._takerPaysIssuer != rhs_storage._takerPaysIssuer {return false}
        if _storage._takerGetsCurrency != rhs_storage._takerGetsCurrency {return false}
        if _storage._takerGetsIssuer != rhs_storage._takerGetsIssuer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Escrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Escrow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "destination"),
    3: .same(proto: "amount"),
    4: .same(proto: "condition"),
    5: .standard(proto: "cancel_after"),
    6: .standard(proto: "finish_after"),
    7: .same(proto: "flags"),
    8: .standard(proto: "source_tag"),
    9: .standard(proto: "destination_tag"),
    10: .standard(proto: "owner_node"),
    11: .standard(proto: "destination_node"),
    12: .standard(proto: "previous_transaction_id"),
    13: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  fileprivate class _StorageClass {
    var _account: Org_Xrpl_Rpc_V1_Account? = nil
    var _destination: Org_Xrpl_Rpc_V1_Destination? = nil
    var _amount: Org_Xrpl_Rpc_V1_Amount? = nil
    var _condition: Org_Xrpl_Rpc_V1_Condition? = nil
    var _cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter? = nil
    var _finishAfter: Org_Xrpl_Rpc_V1_FinishAfter? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _sourceTag: Org_Xrpl_Rpc_V1_SourceTag? = nil
    var _destinationTag: Org_Xrpl_Rpc_V1_DestinationTag? = nil
    var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
    var _destinationNode: Org_Xrpl_Rpc_V1_DestinationNode? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _destination = source._destination
      _amount = source._amount
      _condition = source._condition
      _cancelAfter = source._cancelAfter
      _finishAfter = source._finishAfter
      _flags = source._flags
      _sourceTag = source._sourceTag
      _destinationTag = source._destinationTag
      _ownerNode = source._ownerNode
      _destinationNode = source._destinationNode
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._destination)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._condition)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._cancelAfter)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._finishAfter)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._sourceTag)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._destinationTag)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._ownerNode)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._destinationNode)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._destination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._condition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._cancelAfter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._finishAfter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._sourceTag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._destinationTag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._ownerNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._destinationNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Escrow, rhs: Org_Xrpl_Rpc_V1_Escrow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._condition != rhs_storage._condition {return false}
        if _storage._cancelAfter != rhs_storage._cancelAfter {return false}
        if _storage._finishAfter != rhs_storage._finishAfter {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._sourceTag != rhs_storage._sourceTag {return false}
        if _storage._destinationTag != rhs_storage._destinationTag {return false}
        if _storage._ownerNode != rhs_storage._ownerNode {return false}
        if _storage._destinationNode != rhs_storage._destinationNode {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_FeeSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeeSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_fee"),
    2: .standard(proto: "reference_fee_units"),
    3: .standard(proto: "reserve_base"),
    4: .standard(proto: "reserve_increment"),
    5: .same(proto: "flags"),
  ]

  fileprivate class _StorageClass {
    var _baseFee: Org_Xrpl_Rpc_V1_BaseFee? = nil
    var _referenceFeeUnits: Org_Xrpl_Rpc_V1_ReferenceFeeUnits? = nil
    var _reserveBase: Org_Xrpl_Rpc_V1_ReserveBase? = nil
    var _reserveIncrement: Org_Xrpl_Rpc_V1_ReserveIncrement? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseFee = source._baseFee
      _referenceFeeUnits = source._referenceFeeUnits
      _reserveBase = source._reserveBase
      _reserveIncrement = source._reserveIncrement
      _flags = source._flags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._baseFee)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._referenceFeeUnits)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._reserveBase)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._reserveIncrement)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._flags)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._baseFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._referenceFeeUnits {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._reserveBase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._reserveIncrement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_FeeSettings, rhs: Org_Xrpl_Rpc_V1_FeeSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseFee != rhs_storage._baseFee {return false}
        if _storage._referenceFeeUnits != rhs_storage._referenceFeeUnits {return false}
        if _storage._reserveBase != rhs_storage._reserveBase {return false}
        if _storage._reserveIncrement != rhs_storage._reserveIncrement {return false}
        if _storage._flags != rhs_storage._flags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_LedgerHashes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LedgerHashes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_ledger_sequence"),
    2: .same(proto: "hashes"),
    3: .same(proto: "flags"),
  ]

  fileprivate class _StorageClass {
    var _lastLedgerSequence: Org_Xrpl_Rpc_V1_LastLedgerSequence? = nil
    var _hashes: [Org_Xrpl_Rpc_V1_Hash] = []
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _lastLedgerSequence = source._lastLedgerSequence
      _hashes = source._hashes
      _flags = source._flags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._lastLedgerSequence)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._hashes)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._flags)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._lastLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._hashes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._hashes, fieldNumber: 2)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_LedgerHashes, rhs: Org_Xrpl_Rpc_V1_LedgerHashes) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lastLedgerSequence != rhs_storage._lastLedgerSequence {return false}
        if _storage._hashes != rhs_storage._hashes {return false}
        if _storage._flags != rhs_storage._flags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Offer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Offer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "sequence"),
    3: .same(proto: "flags"),
    4: .standard(proto: "taker_pays"),
    5: .standard(proto: "taker_gets"),
    6: .standard(proto: "book_directory"),
    7: .standard(proto: "book_node"),
    8: .standard(proto: "owner_node"),
    9: .same(proto: "expiration"),
    10: .standard(proto: "previous_transaction_id"),
    11: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  fileprivate class _StorageClass {
    var _account: Org_Xrpl_Rpc_V1_Account? = nil
    var _sequence: Org_Xrpl_Rpc_V1_Sequence? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _takerPays: Org_Xrpl_Rpc_V1_TakerPays? = nil
    var _takerGets: Org_Xrpl_Rpc_V1_TakerGets? = nil
    var _bookDirectory: Org_Xrpl_Rpc_V1_BookDirectory? = nil
    var _bookNode: Org_Xrpl_Rpc_V1_BookNode? = nil
    var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
    var _expiration: Org_Xrpl_Rpc_V1_Expiration? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _sequence = source._sequence
      _flags = source._flags
      _takerPays = source._takerPays
      _takerGets = source._takerGets
      _bookDirectory = source._bookDirectory
      _bookNode = source._bookNode
      _ownerNode = source._ownerNode
      _expiration = source._expiration
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._sequence)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._takerPays)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._takerGets)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._bookDirectory)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._bookNode)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._ownerNode)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._expiration)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._sequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._takerPays {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._takerGets {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._bookDirectory {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._bookNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._ownerNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._expiration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Offer, rhs: Org_Xrpl_Rpc_V1_Offer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._takerPays != rhs_storage._takerPays {return false}
        if _storage._takerGets != rhs_storage._takerGets {return false}
        if _storage._bookDirectory != rhs_storage._bookDirectory {return false}
        if _storage._bookNode != rhs_storage._bookNode {return false}
        if _storage._ownerNode != rhs_storage._ownerNode {return false}
        if _storage._expiration != rhs_storage._expiration {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_PayChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PayChannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "destination"),
    3: .same(proto: "amount"),
    4: .same(proto: "balance"),
    5: .standard(proto: "public_key"),
    6: .standard(proto: "settle_delay"),
    7: .standard(proto: "owner_node"),
    8: .standard(proto: "previous_transaction_id"),
    9: .standard(proto: "previous_transaction_ledger_sequence"),
    10: .same(proto: "flags"),
    11: .same(proto: "expiration"),
    12: .standard(proto: "cancel_after"),
    13: .standard(proto: "source_tag"),
    14: .standard(proto: "destination_tag"),
  ]

  fileprivate class _StorageClass {
    var _account: Org_Xrpl_Rpc_V1_Account? = nil
    var _destination: Org_Xrpl_Rpc_V1_Destination? = nil
    var _amount: Org_Xrpl_Rpc_V1_Amount? = nil
    var _balance: Org_Xrpl_Rpc_V1_Balance? = nil
    var _publicKey: Org_Xrpl_Rpc_V1_PublicKey? = nil
    var _settleDelay: Org_Xrpl_Rpc_V1_SettleDelay? = nil
    var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _expiration: Org_Xrpl_Rpc_V1_Expiration? = nil
    var _cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter? = nil
    var _sourceTag: Org_Xrpl_Rpc_V1_SourceTag? = nil
    var _destinationTag: Org_Xrpl_Rpc_V1_DestinationTag? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _destination = source._destination
      _amount = source._amount
      _balance = source._balance
      _publicKey = source._publicKey
      _settleDelay = source._settleDelay
      _ownerNode = source._ownerNode
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
      _flags = source._flags
      _expiration = source._expiration
      _cancelAfter = source._cancelAfter
      _sourceTag = source._sourceTag
      _destinationTag = source._destinationTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._destination)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._amount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._balance)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._publicKey)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._settleDelay)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._ownerNode)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._expiration)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._cancelAfter)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._sourceTag)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._destinationTag)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._destination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._balance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._publicKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._settleDelay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._ownerNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._expiration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._cancelAfter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._sourceTag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._destinationTag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_PayChannel, rhs: Org_Xrpl_Rpc_V1_PayChannel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._destination != rhs_storage._destination {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._balance != rhs_storage._balance {return false}
        if _storage._publicKey != rhs_storage._publicKey {return false}
        if _storage._settleDelay != rhs_storage._settleDelay {return false}
        if _storage._ownerNode != rhs_storage._ownerNode {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._expiration != rhs_storage._expiration {return false}
        if _storage._cancelAfter != rhs_storage._cancelAfter {return false}
        if _storage._sourceTag != rhs_storage._sourceTag {return false}
        if _storage._destinationTag != rhs_storage._destinationTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_RippleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RippleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "balance"),
    2: .same(proto: "flags"),
    3: .standard(proto: "low_limit"),
    4: .standard(proto: "high_limit"),
    5: .standard(proto: "low_node"),
    6: .standard(proto: "high_node"),
    7: .standard(proto: "low_quality_in"),
    8: .standard(proto: "low_quality_out"),
    9: .standard(proto: "high_quality_in"),
    10: .standard(proto: "high_quality_out"),
    11: .standard(proto: "previous_transaction_id"),
    12: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  fileprivate class _StorageClass {
    var _balance: Org_Xrpl_Rpc_V1_Balance? = nil
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _lowLimit: Org_Xrpl_Rpc_V1_LowLimit? = nil
    var _highLimit: Org_Xrpl_Rpc_V1_HighLimit? = nil
    var _lowNode: Org_Xrpl_Rpc_V1_LowNode? = nil
    var _highNode: Org_Xrpl_Rpc_V1_HighNode? = nil
    var _lowQualityIn: Org_Xrpl_Rpc_V1_LowQualityIn? = nil
    var _lowQualityOut: Org_Xrpl_Rpc_V1_LowQualityOut? = nil
    var _highQualityIn: Org_Xrpl_Rpc_V1_HighQualityIn? = nil
    var _highQualityOut: Org_Xrpl_Rpc_V1_HighQualityOut? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _balance = source._balance
      _flags = source._flags
      _lowLimit = source._lowLimit
      _highLimit = source._highLimit
      _lowNode = source._lowNode
      _highNode = source._highNode
      _lowQualityIn = source._lowQualityIn
      _lowQualityOut = source._lowQualityOut
      _highQualityIn = source._highQualityIn
      _highQualityOut = source._highQualityOut
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._balance)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._lowLimit)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._highLimit)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._lowNode)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._highNode)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._lowQualityIn)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._lowQualityOut)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._highQualityIn)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._highQualityOut)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._balance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._lowLimit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._highLimit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._lowNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._highNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._lowQualityIn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._lowQualityOut {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._highQualityIn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._highQualityOut {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_RippleState, rhs: Org_Xrpl_Rpc_V1_RippleState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._balance != rhs_storage._balance {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._lowLimit != rhs_storage._lowLimit {return false}
        if _storage._highLimit != rhs_storage._highLimit {return false}
        if _storage._lowNode != rhs_storage._lowNode {return false}
        if _storage._highNode != rhs_storage._highNode {return false}
        if _storage._lowQualityIn != rhs_storage._lowQualityIn {return false}
        if _storage._lowQualityOut != rhs_storage._lowQualityOut {return false}
        if _storage._highQualityIn != rhs_storage._highQualityIn {return false}
        if _storage._highQualityOut != rhs_storage._highQualityOut {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_SignerList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignerList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "previous_transaction_id"),
    3: .standard(proto: "previous_transaction_ledger_sequence"),
    4: .standard(proto: "owner_node"),
    5: .standard(proto: "signer_entries"),
    6: .standard(proto: "signer_list_id"),
    7: .standard(proto: "signer_quorum"),
  ]

  fileprivate class _StorageClass {
    var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
    var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
    var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
    var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
    var _signerEntries: [Org_Xrpl_Rpc_V1_SignerEntry] = []
    var _signerListID: Org_Xrpl_Rpc_V1_SignerListID? = nil
    var _signerQuorum: Org_Xrpl_Rpc_V1_SignerQuorum? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _flags = source._flags
      _previousTransactionID = source._previousTransactionID
      _previousTransactionLedgerSequence = source._previousTransactionLedgerSequence
      _ownerNode = source._ownerNode
      _signerEntries = source._signerEntries
      _signerListID = source._signerListID
      _signerQuorum = source._signerQuorum
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._previousTransactionLedgerSequence)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._ownerNode)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._signerEntries)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._signerListID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._signerQuorum)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._previousTransactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._previousTransactionLedgerSequence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._ownerNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._signerEntries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._signerEntries, fieldNumber: 5)
      }
      if let v = _storage._signerListID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._signerQuorum {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_SignerList, rhs: Org_Xrpl_Rpc_V1_SignerList) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._previousTransactionID != rhs_storage._previousTransactionID {return false}
        if _storage._previousTransactionLedgerSequence != rhs_storage._previousTransactionLedgerSequence {return false}
        if _storage._ownerNode != rhs_storage._ownerNode {return false}
        if _storage._signerEntries != rhs_storage._signerEntries {return false}
        if _storage._signerListID != rhs_storage._signerListID {return false}
        if _storage._signerQuorum != rhs_storage._signerQuorum {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
