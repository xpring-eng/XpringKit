// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/ledger_objects.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Next field: 13
public enum Org_Xrpl_Rpc_V1_LedgerEntryType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case accountRoot // = 1
  case amendments // = 2
  case check // = 3
  case depositPreauth // = 4
  case directoryNode // = 5
  case escrow // = 6
  case feeSettings // = 7
  case ledgerHashes // = 8
  case offer // = 9
  case payChannel // = 10
  case rippleState // = 11
  case signerList // = 12
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .accountRoot
    case 2: self = .amendments
    case 3: self = .check
    case 4: self = .depositPreauth
    case 5: self = .directoryNode
    case 6: self = .escrow
    case 7: self = .feeSettings
    case 8: self = .ledgerHashes
    case 9: self = .offer
    case 10: self = .payChannel
    case 11: self = .rippleState
    case 12: self = .signerList
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .accountRoot: return 1
    case .amendments: return 2
    case .check: return 3
    case .depositPreauth: return 4
    case .directoryNode: return 5
    case .escrow: return 6
    case .feeSettings: return 7
    case .ledgerHashes: return 8
    case .offer: return 9
    case .payChannel: return 10
    case .rippleState: return 11
    case .signerList: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Org_Xrpl_Rpc_V1_LedgerEntryType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Org_Xrpl_Rpc_V1_LedgerEntryType] = [
    .unspecified,
    .accountRoot,
    .amendments,
    .check,
    .depositPreauth,
    .directoryNode,
    .escrow,
    .feeSettings,
    .ledgerHashes,
    .offer,
    .payChannel,
    .rippleState,
    .signerList,
  ]
}

#endif  // swift(>=4.2)

/// Next field: 13
public struct Org_Xrpl_Rpc_V1_LedgerObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var object: Org_Xrpl_Rpc_V1_LedgerObject.OneOf_Object? = nil

  public var accountRoot: Org_Xrpl_Rpc_V1_AccountRoot {
    get {
      if case .accountRoot(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_AccountRoot()
    }
    set {object = .accountRoot(newValue)}
  }

  public var amendments: Org_Xrpl_Rpc_V1_Amendments {
    get {
      if case .amendments(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_Amendments()
    }
    set {object = .amendments(newValue)}
  }

  public var check: Org_Xrpl_Rpc_V1_Check {
    get {
      if case .check(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_Check()
    }
    set {object = .check(newValue)}
  }

  public var depositPreauth: Org_Xrpl_Rpc_V1_DepositPreauthObject {
    get {
      if case .depositPreauth(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_DepositPreauthObject()
    }
    set {object = .depositPreauth(newValue)}
  }

  public var directoryNode: Org_Xrpl_Rpc_V1_DirectoryNode {
    get {
      if case .directoryNode(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_DirectoryNode()
    }
    set {object = .directoryNode(newValue)}
  }

  public var escrow: Org_Xrpl_Rpc_V1_Escrow {
    get {
      if case .escrow(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_Escrow()
    }
    set {object = .escrow(newValue)}
  }

  public var feeSettings: Org_Xrpl_Rpc_V1_FeeSettings {
    get {
      if case .feeSettings(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_FeeSettings()
    }
    set {object = .feeSettings(newValue)}
  }

  public var ledgerHashes: Org_Xrpl_Rpc_V1_LedgerHashes {
    get {
      if case .ledgerHashes(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_LedgerHashes()
    }
    set {object = .ledgerHashes(newValue)}
  }

  public var offer: Org_Xrpl_Rpc_V1_Offer {
    get {
      if case .offer(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_Offer()
    }
    set {object = .offer(newValue)}
  }

  public var payChannel: Org_Xrpl_Rpc_V1_PayChannel {
    get {
      if case .payChannel(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_PayChannel()
    }
    set {object = .payChannel(newValue)}
  }

  public var rippleState: Org_Xrpl_Rpc_V1_RippleState {
    get {
      if case .rippleState(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_RippleState()
    }
    set {object = .rippleState(newValue)}
  }

  public var signerList: Org_Xrpl_Rpc_V1_SignerList {
    get {
      if case .signerList(let v)? = object {return v}
      return Org_Xrpl_Rpc_V1_SignerList()
    }
    set {object = .signerList(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Object: Equatable {
    case accountRoot(Org_Xrpl_Rpc_V1_AccountRoot)
    case amendments(Org_Xrpl_Rpc_V1_Amendments)
    case check(Org_Xrpl_Rpc_V1_Check)
    case depositPreauth(Org_Xrpl_Rpc_V1_DepositPreauthObject)
    case directoryNode(Org_Xrpl_Rpc_V1_DirectoryNode)
    case escrow(Org_Xrpl_Rpc_V1_Escrow)
    case feeSettings(Org_Xrpl_Rpc_V1_FeeSettings)
    case ledgerHashes(Org_Xrpl_Rpc_V1_LedgerHashes)
    case offer(Org_Xrpl_Rpc_V1_Offer)
    case payChannel(Org_Xrpl_Rpc_V1_PayChannel)
    case rippleState(Org_Xrpl_Rpc_V1_RippleState)
    case signerList(Org_Xrpl_Rpc_V1_SignerList)

  #if !swift(>=4.1)
    public static func ==(lhs: Org_Xrpl_Rpc_V1_LedgerObject.OneOf_Object, rhs: Org_Xrpl_Rpc_V1_LedgerObject.OneOf_Object) -> Bool {
      switch (lhs, rhs) {
      case (.accountRoot(let l), .accountRoot(let r)): return l == r
      case (.amendments(let l), .amendments(let r)): return l == r
      case (.check(let l), .check(let r)): return l == r
      case (.depositPreauth(let l), .depositPreauth(let r)): return l == r
      case (.directoryNode(let l), .directoryNode(let r)): return l == r
      case (.escrow(let l), .escrow(let r)): return l == r
      case (.feeSettings(let l), .feeSettings(let r)): return l == r
      case (.ledgerHashes(let l), .ledgerHashes(let r)): return l == r
      case (.offer(let l), .offer(let r)): return l == r
      case (.payChannel(let l), .payChannel(let r)): return l == r
      case (.rippleState(let l), .rippleState(let r)): return l == r
      case (.signerList(let l), .signerList(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Next field: 15
public struct Org_Xrpl_Rpc_V1_AccountRoot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var balance: Org_Xrpl_Rpc_V1_Balance {
    get {return _balance ?? Org_Xrpl_Rpc_V1_Balance()}
    set {_balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool {return self._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() {self._balance = nil}

  public var sequence: Org_Xrpl_Rpc_V1_Sequence {
    get {return _sequence ?? Org_Xrpl_Rpc_V1_Sequence()}
    set {_sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  public var hasSequence: Bool {return self._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  public mutating func clearSequence() {self._sequence = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var ownerCount: Org_Xrpl_Rpc_V1_OwnerCount {
    get {return _ownerCount ?? Org_Xrpl_Rpc_V1_OwnerCount()}
    set {_ownerCount = newValue}
  }
  /// Returns true if `ownerCount` has been explicitly set.
  public var hasOwnerCount: Bool {return self._ownerCount != nil}
  /// Clears the value of `ownerCount`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerCount() {self._ownerCount = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var accountTransactionID: Org_Xrpl_Rpc_V1_AccountTransactionID {
    get {return _accountTransactionID ?? Org_Xrpl_Rpc_V1_AccountTransactionID()}
    set {_accountTransactionID = newValue}
  }
  /// Returns true if `accountTransactionID` has been explicitly set.
  public var hasAccountTransactionID: Bool {return self._accountTransactionID != nil}
  /// Clears the value of `accountTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountTransactionID() {self._accountTransactionID = nil}

  public var domain: Org_Xrpl_Rpc_V1_Domain {
    get {return _domain ?? Org_Xrpl_Rpc_V1_Domain()}
    set {_domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  public var hasDomain: Bool {return self._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  public mutating func clearDomain() {self._domain = nil}

  public var emailHash: Org_Xrpl_Rpc_V1_EmailHash {
    get {return _emailHash ?? Org_Xrpl_Rpc_V1_EmailHash()}
    set {_emailHash = newValue}
  }
  /// Returns true if `emailHash` has been explicitly set.
  public var hasEmailHash: Bool {return self._emailHash != nil}
  /// Clears the value of `emailHash`. Subsequent reads from it will return its default value.
  public mutating func clearEmailHash() {self._emailHash = nil}

  public var messageKey: Org_Xrpl_Rpc_V1_MessageKey {
    get {return _messageKey ?? Org_Xrpl_Rpc_V1_MessageKey()}
    set {_messageKey = newValue}
  }
  /// Returns true if `messageKey` has been explicitly set.
  public var hasMessageKey: Bool {return self._messageKey != nil}
  /// Clears the value of `messageKey`. Subsequent reads from it will return its default value.
  public mutating func clearMessageKey() {self._messageKey = nil}

  public var regularKey: Org_Xrpl_Rpc_V1_RegularKey {
    get {return _regularKey ?? Org_Xrpl_Rpc_V1_RegularKey()}
    set {_regularKey = newValue}
  }
  /// Returns true if `regularKey` has been explicitly set.
  public var hasRegularKey: Bool {return self._regularKey != nil}
  /// Clears the value of `regularKey`. Subsequent reads from it will return its default value.
  public mutating func clearRegularKey() {self._regularKey = nil}

  public var tickSize: Org_Xrpl_Rpc_V1_TickSize {
    get {return _tickSize ?? Org_Xrpl_Rpc_V1_TickSize()}
    set {_tickSize = newValue}
  }
  /// Returns true if `tickSize` has been explicitly set.
  public var hasTickSize: Bool {return self._tickSize != nil}
  /// Clears the value of `tickSize`. Subsequent reads from it will return its default value.
  public mutating func clearTickSize() {self._tickSize = nil}

  public var transferRate: Org_Xrpl_Rpc_V1_TransferRate {
    get {return _transferRate ?? Org_Xrpl_Rpc_V1_TransferRate()}
    set {_transferRate = newValue}
  }
  /// Returns true if `transferRate` has been explicitly set.
  public var hasTransferRate: Bool {return self._transferRate != nil}
  /// Clears the value of `transferRate`. Subsequent reads from it will return its default value.
  public mutating func clearTransferRate() {self._transferRate = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Org_Xrpl_Rpc_V1_Account? = nil
  fileprivate var _balance: Org_Xrpl_Rpc_V1_Balance? = nil
  fileprivate var _sequence: Org_Xrpl_Rpc_V1_Sequence? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _ownerCount: Org_Xrpl_Rpc_V1_OwnerCount? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
  fileprivate var _accountTransactionID: Org_Xrpl_Rpc_V1_AccountTransactionID? = nil
  fileprivate var _domain: Org_Xrpl_Rpc_V1_Domain? = nil
  fileprivate var _emailHash: Org_Xrpl_Rpc_V1_EmailHash? = nil
  fileprivate var _messageKey: Org_Xrpl_Rpc_V1_MessageKey? = nil
  fileprivate var _regularKey: Org_Xrpl_Rpc_V1_RegularKey? = nil
  fileprivate var _tickSize: Org_Xrpl_Rpc_V1_TickSize? = nil
  fileprivate var _transferRate: Org_Xrpl_Rpc_V1_TransferRate? = nil
}

/// Next field: 4
public struct Org_Xrpl_Rpc_V1_Amendments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amendments: [Org_Xrpl_Rpc_V1_Amendments.Amendment] = []

  public var majorities: [Org_Xrpl_Rpc_V1_Amendments.Majority] = []

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Next field: 2
  public struct Amendment {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// 32 bytes
    public var value: Data = SwiftProtobuf.Internal.emptyData

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Next field: 3
  public struct Majority {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var amendment: Org_Xrpl_Rpc_V1_Amendments.Amendment {
      get {return _amendment ?? Org_Xrpl_Rpc_V1_Amendments.Amendment()}
      set {_amendment = newValue}
    }
    /// Returns true if `amendment` has been explicitly set.
    public var hasAmendment: Bool {return self._amendment != nil}
    /// Clears the value of `amendment`. Subsequent reads from it will return its default value.
    public mutating func clearAmendment() {self._amendment = nil}

    public var closeTime: Org_Xrpl_Rpc_V1_CloseTime {
      get {return _closeTime ?? Org_Xrpl_Rpc_V1_CloseTime()}
      set {_closeTime = newValue}
    }
    /// Returns true if `closeTime` has been explicitly set.
    public var hasCloseTime: Bool {return self._closeTime != nil}
    /// Clears the value of `closeTime`. Subsequent reads from it will return its default value.
    public mutating func clearCloseTime() {self._closeTime = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amendment: Org_Xrpl_Rpc_V1_Amendments.Amendment? = nil
    fileprivate var _closeTime: Org_Xrpl_Rpc_V1_CloseTime? = nil
  }

  public init() {}

  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
}

/// Next field: 14
public struct Org_Xrpl_Rpc_V1_Check {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var destination: Org_Xrpl_Rpc_V1_Destination {
    get {return _destination ?? Org_Xrpl_Rpc_V1_Destination()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {self._destination = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return self._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {self._ownerNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var sendMax: Org_Xrpl_Rpc_V1_SendMax {
    get {return _sendMax ?? Org_Xrpl_Rpc_V1_SendMax()}
    set {_sendMax = newValue}
  }
  /// Returns true if `sendMax` has been explicitly set.
  public var hasSendMax: Bool {return self._sendMax != nil}
  /// Clears the value of `sendMax`. Subsequent reads from it will return its default value.
  public mutating func clearSendMax() {self._sendMax = nil}

  public var sequence: Org_Xrpl_Rpc_V1_Sequence {
    get {return _sequence ?? Org_Xrpl_Rpc_V1_Sequence()}
    set {_sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  public var hasSequence: Bool {return self._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  public mutating func clearSequence() {self._sequence = nil}

  public var destinationNode: Org_Xrpl_Rpc_V1_DestinationNode {
    get {return _destinationNode ?? Org_Xrpl_Rpc_V1_DestinationNode()}
    set {_destinationNode = newValue}
  }
  /// Returns true if `destinationNode` has been explicitly set.
  public var hasDestinationNode: Bool {return self._destinationNode != nil}
  /// Clears the value of `destinationNode`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationNode() {self._destinationNode = nil}

  public var destinationTag: Org_Xrpl_Rpc_V1_DestinationTag {
    get {return _destinationTag ?? Org_Xrpl_Rpc_V1_DestinationTag()}
    set {_destinationTag = newValue}
  }
  /// Returns true if `destinationTag` has been explicitly set.
  public var hasDestinationTag: Bool {return self._destinationTag != nil}
  /// Clears the value of `destinationTag`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationTag() {self._destinationTag = nil}

  public var expiration: Org_Xrpl_Rpc_V1_Expiration {
    get {return _expiration ?? Org_Xrpl_Rpc_V1_Expiration()}
    set {_expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  public var hasExpiration: Bool {return self._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  public mutating func clearExpiration() {self._expiration = nil}

  public var invoiceID: Org_Xrpl_Rpc_V1_InvoiceID {
    get {return _invoiceID ?? Org_Xrpl_Rpc_V1_InvoiceID()}
    set {_invoiceID = newValue}
  }
  /// Returns true if `invoiceID` has been explicitly set.
  public var hasInvoiceID: Bool {return self._invoiceID != nil}
  /// Clears the value of `invoiceID`. Subsequent reads from it will return its default value.
  public mutating func clearInvoiceID() {self._invoiceID = nil}

  public var sourceTag: Org_Xrpl_Rpc_V1_SourceTag {
    get {return _sourceTag ?? Org_Xrpl_Rpc_V1_SourceTag()}
    set {_sourceTag = newValue}
  }
  /// Returns true if `sourceTag` has been explicitly set.
  public var hasSourceTag: Bool {return self._sourceTag != nil}
  /// Clears the value of `sourceTag`. Subsequent reads from it will return its default value.
  public mutating func clearSourceTag() {self._sourceTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Org_Xrpl_Rpc_V1_Account? = nil
  fileprivate var _destination: Org_Xrpl_Rpc_V1_Destination? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
  fileprivate var _sendMax: Org_Xrpl_Rpc_V1_SendMax? = nil
  fileprivate var _sequence: Org_Xrpl_Rpc_V1_Sequence? = nil
  fileprivate var _destinationNode: Org_Xrpl_Rpc_V1_DestinationNode? = nil
  fileprivate var _destinationTag: Org_Xrpl_Rpc_V1_DestinationTag? = nil
  fileprivate var _expiration: Org_Xrpl_Rpc_V1_Expiration? = nil
  fileprivate var _invoiceID: Org_Xrpl_Rpc_V1_InvoiceID? = nil
  fileprivate var _sourceTag: Org_Xrpl_Rpc_V1_SourceTag? = nil
}

/// Next field: 7
public struct Org_Xrpl_Rpc_V1_DepositPreauthObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var authorize: Org_Xrpl_Rpc_V1_Authorize {
    get {return _authorize ?? Org_Xrpl_Rpc_V1_Authorize()}
    set {_authorize = newValue}
  }
  /// Returns true if `authorize` has been explicitly set.
  public var hasAuthorize: Bool {return self._authorize != nil}
  /// Clears the value of `authorize`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorize() {self._authorize = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return self._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {self._ownerNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Org_Xrpl_Rpc_V1_Account? = nil
  fileprivate var _authorize: Org_Xrpl_Rpc_V1_Authorize? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
}

/// Next field: 11
public struct Org_Xrpl_Rpc_V1_DirectoryNode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var rootIndex: Org_Xrpl_Rpc_V1_RootIndex {
    get {return _rootIndex ?? Org_Xrpl_Rpc_V1_RootIndex()}
    set {_rootIndex = newValue}
  }
  /// Returns true if `rootIndex` has been explicitly set.
  public var hasRootIndex: Bool {return self._rootIndex != nil}
  /// Clears the value of `rootIndex`. Subsequent reads from it will return its default value.
  public mutating func clearRootIndex() {self._rootIndex = nil}

  public var indexes: [Org_Xrpl_Rpc_V1_Index] = []

  public var indexNext: Org_Xrpl_Rpc_V1_IndexNext {
    get {return _indexNext ?? Org_Xrpl_Rpc_V1_IndexNext()}
    set {_indexNext = newValue}
  }
  /// Returns true if `indexNext` has been explicitly set.
  public var hasIndexNext: Bool {return self._indexNext != nil}
  /// Clears the value of `indexNext`. Subsequent reads from it will return its default value.
  public mutating func clearIndexNext() {self._indexNext = nil}

  public var indexPrevious: Org_Xrpl_Rpc_V1_IndexPrevious {
    get {return _indexPrevious ?? Org_Xrpl_Rpc_V1_IndexPrevious()}
    set {_indexPrevious = newValue}
  }
  /// Returns true if `indexPrevious` has been explicitly set.
  public var hasIndexPrevious: Bool {return self._indexPrevious != nil}
  /// Clears the value of `indexPrevious`. Subsequent reads from it will return its default value.
  public mutating func clearIndexPrevious() {self._indexPrevious = nil}

  public var owner: Org_Xrpl_Rpc_V1_Owner {
    get {return _owner ?? Org_Xrpl_Rpc_V1_Owner()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  public var takerPaysCurrency: Org_Xrpl_Rpc_V1_TakerPaysCurrency {
    get {return _takerPaysCurrency ?? Org_Xrpl_Rpc_V1_TakerPaysCurrency()}
    set {_takerPaysCurrency = newValue}
  }
  /// Returns true if `takerPaysCurrency` has been explicitly set.
  public var hasTakerPaysCurrency: Bool {return self._takerPaysCurrency != nil}
  /// Clears the value of `takerPaysCurrency`. Subsequent reads from it will return its default value.
  public mutating func clearTakerPaysCurrency() {self._takerPaysCurrency = nil}

  public var takerPaysIssuer: Org_Xrpl_Rpc_V1_TakerPaysIssuer {
    get {return _takerPaysIssuer ?? Org_Xrpl_Rpc_V1_TakerPaysIssuer()}
    set {_takerPaysIssuer = newValue}
  }
  /// Returns true if `takerPaysIssuer` has been explicitly set.
  public var hasTakerPaysIssuer: Bool {return self._takerPaysIssuer != nil}
  /// Clears the value of `takerPaysIssuer`. Subsequent reads from it will return its default value.
  public mutating func clearTakerPaysIssuer() {self._takerPaysIssuer = nil}

  public var takerGetsCurrency: Org_Xrpl_Rpc_V1_TakerGetsCurreny {
    get {return _takerGetsCurrency ?? Org_Xrpl_Rpc_V1_TakerGetsCurreny()}
    set {_takerGetsCurrency = newValue}
  }
  /// Returns true if `takerGetsCurrency` has been explicitly set.
  public var hasTakerGetsCurrency: Bool {return self._takerGetsCurrency != nil}
  /// Clears the value of `takerGetsCurrency`. Subsequent reads from it will return its default value.
  public mutating func clearTakerGetsCurrency() {self._takerGetsCurrency = nil}

  public var takerGetsIssuer: Org_Xrpl_Rpc_V1_TakerGetsIssuer {
    get {return _takerGetsIssuer ?? Org_Xrpl_Rpc_V1_TakerGetsIssuer()}
    set {_takerGetsIssuer = newValue}
  }
  /// Returns true if `takerGetsIssuer` has been explicitly set.
  public var hasTakerGetsIssuer: Bool {return self._takerGetsIssuer != nil}
  /// Clears the value of `takerGetsIssuer`. Subsequent reads from it will return its default value.
  public mutating func clearTakerGetsIssuer() {self._takerGetsIssuer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _rootIndex: Org_Xrpl_Rpc_V1_RootIndex? = nil
  fileprivate var _indexNext: Org_Xrpl_Rpc_V1_IndexNext? = nil
  fileprivate var _indexPrevious: Org_Xrpl_Rpc_V1_IndexPrevious? = nil
  fileprivate var _owner: Org_Xrpl_Rpc_V1_Owner? = nil
  fileprivate var _takerPaysCurrency: Org_Xrpl_Rpc_V1_TakerPaysCurrency? = nil
  fileprivate var _takerPaysIssuer: Org_Xrpl_Rpc_V1_TakerPaysIssuer? = nil
  fileprivate var _takerGetsCurrency: Org_Xrpl_Rpc_V1_TakerGetsCurreny? = nil
  fileprivate var _takerGetsIssuer: Org_Xrpl_Rpc_V1_TakerGetsIssuer? = nil
}

/// Next field: 14
public struct Org_Xrpl_Rpc_V1_Escrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var destination: Org_Xrpl_Rpc_V1_Destination {
    get {return _destination ?? Org_Xrpl_Rpc_V1_Destination()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {self._destination = nil}

  public var amount: Org_Xrpl_Rpc_V1_Amount {
    get {return _amount ?? Org_Xrpl_Rpc_V1_Amount()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {self._amount = nil}

  public var condition: Org_Xrpl_Rpc_V1_Condition {
    get {return _condition ?? Org_Xrpl_Rpc_V1_Condition()}
    set {_condition = newValue}
  }
  /// Returns true if `condition` has been explicitly set.
  public var hasCondition: Bool {return self._condition != nil}
  /// Clears the value of `condition`. Subsequent reads from it will return its default value.
  public mutating func clearCondition() {self._condition = nil}

  public var cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter {
    get {return _cancelAfter ?? Org_Xrpl_Rpc_V1_CancelAfter()}
    set {_cancelAfter = newValue}
  }
  /// Returns true if `cancelAfter` has been explicitly set.
  public var hasCancelAfter: Bool {return self._cancelAfter != nil}
  /// Clears the value of `cancelAfter`. Subsequent reads from it will return its default value.
  public mutating func clearCancelAfter() {self._cancelAfter = nil}

  public var finishAfter: Org_Xrpl_Rpc_V1_FinishAfter {
    get {return _finishAfter ?? Org_Xrpl_Rpc_V1_FinishAfter()}
    set {_finishAfter = newValue}
  }
  /// Returns true if `finishAfter` has been explicitly set.
  public var hasFinishAfter: Bool {return self._finishAfter != nil}
  /// Clears the value of `finishAfter`. Subsequent reads from it will return its default value.
  public mutating func clearFinishAfter() {self._finishAfter = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var sourceTag: Org_Xrpl_Rpc_V1_SourceTag {
    get {return _sourceTag ?? Org_Xrpl_Rpc_V1_SourceTag()}
    set {_sourceTag = newValue}
  }
  /// Returns true if `sourceTag` has been explicitly set.
  public var hasSourceTag: Bool {return self._sourceTag != nil}
  /// Clears the value of `sourceTag`. Subsequent reads from it will return its default value.
  public mutating func clearSourceTag() {self._sourceTag = nil}

  public var destinationTag: Org_Xrpl_Rpc_V1_DestinationTag {
    get {return _destinationTag ?? Org_Xrpl_Rpc_V1_DestinationTag()}
    set {_destinationTag = newValue}
  }
  /// Returns true if `destinationTag` has been explicitly set.
  public var hasDestinationTag: Bool {return self._destinationTag != nil}
  /// Clears the value of `destinationTag`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationTag() {self._destinationTag = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return self._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {self._ownerNode = nil}

  public var destinationNode: Org_Xrpl_Rpc_V1_DestinationNode {
    get {return _destinationNode ?? Org_Xrpl_Rpc_V1_DestinationNode()}
    set {_destinationNode = newValue}
  }
  /// Returns true if `destinationNode` has been explicitly set.
  public var hasDestinationNode: Bool {return self._destinationNode != nil}
  /// Clears the value of `destinationNode`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationNode() {self._destinationNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Org_Xrpl_Rpc_V1_Account? = nil
  fileprivate var _destination: Org_Xrpl_Rpc_V1_Destination? = nil
  fileprivate var _amount: Org_Xrpl_Rpc_V1_Amount? = nil
  fileprivate var _condition: Org_Xrpl_Rpc_V1_Condition? = nil
  fileprivate var _cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter? = nil
  fileprivate var _finishAfter: Org_Xrpl_Rpc_V1_FinishAfter? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _sourceTag: Org_Xrpl_Rpc_V1_SourceTag? = nil
  fileprivate var _destinationTag: Org_Xrpl_Rpc_V1_DestinationTag? = nil
  fileprivate var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
  fileprivate var _destinationNode: Org_Xrpl_Rpc_V1_DestinationNode? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
}

/// Next field: 6
public struct Org_Xrpl_Rpc_V1_FeeSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var baseFee: Org_Xrpl_Rpc_V1_BaseFee {
    get {return _baseFee ?? Org_Xrpl_Rpc_V1_BaseFee()}
    set {_baseFee = newValue}
  }
  /// Returns true if `baseFee` has been explicitly set.
  public var hasBaseFee: Bool {return self._baseFee != nil}
  /// Clears the value of `baseFee`. Subsequent reads from it will return its default value.
  public mutating func clearBaseFee() {self._baseFee = nil}

  public var referenceFeeUnits: Org_Xrpl_Rpc_V1_ReferenceFeeUnits {
    get {return _referenceFeeUnits ?? Org_Xrpl_Rpc_V1_ReferenceFeeUnits()}
    set {_referenceFeeUnits = newValue}
  }
  /// Returns true if `referenceFeeUnits` has been explicitly set.
  public var hasReferenceFeeUnits: Bool {return self._referenceFeeUnits != nil}
  /// Clears the value of `referenceFeeUnits`. Subsequent reads from it will return its default value.
  public mutating func clearReferenceFeeUnits() {self._referenceFeeUnits = nil}

  public var reserveBase: Org_Xrpl_Rpc_V1_ReserveBase {
    get {return _reserveBase ?? Org_Xrpl_Rpc_V1_ReserveBase()}
    set {_reserveBase = newValue}
  }
  /// Returns true if `reserveBase` has been explicitly set.
  public var hasReserveBase: Bool {return self._reserveBase != nil}
  /// Clears the value of `reserveBase`. Subsequent reads from it will return its default value.
  public mutating func clearReserveBase() {self._reserveBase = nil}

  public var reserveIncrement: Org_Xrpl_Rpc_V1_ReserveIncrement {
    get {return _reserveIncrement ?? Org_Xrpl_Rpc_V1_ReserveIncrement()}
    set {_reserveIncrement = newValue}
  }
  /// Returns true if `reserveIncrement` has been explicitly set.
  public var hasReserveIncrement: Bool {return self._reserveIncrement != nil}
  /// Clears the value of `reserveIncrement`. Subsequent reads from it will return its default value.
  public mutating func clearReserveIncrement() {self._reserveIncrement = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _baseFee: Org_Xrpl_Rpc_V1_BaseFee? = nil
  fileprivate var _referenceFeeUnits: Org_Xrpl_Rpc_V1_ReferenceFeeUnits? = nil
  fileprivate var _reserveBase: Org_Xrpl_Rpc_V1_ReserveBase? = nil
  fileprivate var _reserveIncrement: Org_Xrpl_Rpc_V1_ReserveIncrement? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
}

/// Next field: 4
public struct Org_Xrpl_Rpc_V1_LedgerHashes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lastLedgerSequence: Org_Xrpl_Rpc_V1_LastLedgerSequence {
    get {return _lastLedgerSequence ?? Org_Xrpl_Rpc_V1_LastLedgerSequence()}
    set {_lastLedgerSequence = newValue}
  }
  /// Returns true if `lastLedgerSequence` has been explicitly set.
  public var hasLastLedgerSequence: Bool {return self._lastLedgerSequence != nil}
  /// Clears the value of `lastLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearLastLedgerSequence() {self._lastLedgerSequence = nil}

  public var hashes: [Org_Xrpl_Rpc_V1_Hash] = []

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastLedgerSequence: Org_Xrpl_Rpc_V1_LastLedgerSequence? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
}

/// Next field: 12
public struct Org_Xrpl_Rpc_V1_Offer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var sequence: Org_Xrpl_Rpc_V1_Sequence {
    get {return _sequence ?? Org_Xrpl_Rpc_V1_Sequence()}
    set {_sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  public var hasSequence: Bool {return self._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  public mutating func clearSequence() {self._sequence = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var takerPays: Org_Xrpl_Rpc_V1_TakerPays {
    get {return _takerPays ?? Org_Xrpl_Rpc_V1_TakerPays()}
    set {_takerPays = newValue}
  }
  /// Returns true if `takerPays` has been explicitly set.
  public var hasTakerPays: Bool {return self._takerPays != nil}
  /// Clears the value of `takerPays`. Subsequent reads from it will return its default value.
  public mutating func clearTakerPays() {self._takerPays = nil}

  public var takerGets: Org_Xrpl_Rpc_V1_TakerGets {
    get {return _takerGets ?? Org_Xrpl_Rpc_V1_TakerGets()}
    set {_takerGets = newValue}
  }
  /// Returns true if `takerGets` has been explicitly set.
  public var hasTakerGets: Bool {return self._takerGets != nil}
  /// Clears the value of `takerGets`. Subsequent reads from it will return its default value.
  public mutating func clearTakerGets() {self._takerGets = nil}

  public var bookDirectory: Org_Xrpl_Rpc_V1_BookDirectory {
    get {return _bookDirectory ?? Org_Xrpl_Rpc_V1_BookDirectory()}
    set {_bookDirectory = newValue}
  }
  /// Returns true if `bookDirectory` has been explicitly set.
  public var hasBookDirectory: Bool {return self._bookDirectory != nil}
  /// Clears the value of `bookDirectory`. Subsequent reads from it will return its default value.
  public mutating func clearBookDirectory() {self._bookDirectory = nil}

  public var bookNode: Org_Xrpl_Rpc_V1_BookNode {
    get {return _bookNode ?? Org_Xrpl_Rpc_V1_BookNode()}
    set {_bookNode = newValue}
  }
  /// Returns true if `bookNode` has been explicitly set.
  public var hasBookNode: Bool {return self._bookNode != nil}
  /// Clears the value of `bookNode`. Subsequent reads from it will return its default value.
  public mutating func clearBookNode() {self._bookNode = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return self._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {self._ownerNode = nil}

  public var expiration: Org_Xrpl_Rpc_V1_Expiration {
    get {return _expiration ?? Org_Xrpl_Rpc_V1_Expiration()}
    set {_expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  public var hasExpiration: Bool {return self._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  public mutating func clearExpiration() {self._expiration = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Org_Xrpl_Rpc_V1_Account? = nil
  fileprivate var _sequence: Org_Xrpl_Rpc_V1_Sequence? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _takerPays: Org_Xrpl_Rpc_V1_TakerPays? = nil
  fileprivate var _takerGets: Org_Xrpl_Rpc_V1_TakerGets? = nil
  fileprivate var _bookDirectory: Org_Xrpl_Rpc_V1_BookDirectory? = nil
  fileprivate var _bookNode: Org_Xrpl_Rpc_V1_BookNode? = nil
  fileprivate var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
  fileprivate var _expiration: Org_Xrpl_Rpc_V1_Expiration? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
}

/// Next field: 13
public struct Org_Xrpl_Rpc_V1_PayChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Org_Xrpl_Rpc_V1_Account {
    get {return _account ?? Org_Xrpl_Rpc_V1_Account()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  public var destination: Org_Xrpl_Rpc_V1_Destination {
    get {return _destination ?? Org_Xrpl_Rpc_V1_Destination()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  public var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  public mutating func clearDestination() {self._destination = nil}

  public var amount: Org_Xrpl_Rpc_V1_Amount {
    get {return _amount ?? Org_Xrpl_Rpc_V1_Amount()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {self._amount = nil}

  public var balance: Org_Xrpl_Rpc_V1_Balance {
    get {return _balance ?? Org_Xrpl_Rpc_V1_Balance()}
    set {_balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool {return self._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() {self._balance = nil}

  public var publicKey: Org_Xrpl_Rpc_V1_PublicKey {
    get {return _publicKey ?? Org_Xrpl_Rpc_V1_PublicKey()}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  public var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  public mutating func clearPublicKey() {self._publicKey = nil}

  public var settleDelay: Org_Xrpl_Rpc_V1_SettleDelay {
    get {return _settleDelay ?? Org_Xrpl_Rpc_V1_SettleDelay()}
    set {_settleDelay = newValue}
  }
  /// Returns true if `settleDelay` has been explicitly set.
  public var hasSettleDelay: Bool {return self._settleDelay != nil}
  /// Clears the value of `settleDelay`. Subsequent reads from it will return its default value.
  public mutating func clearSettleDelay() {self._settleDelay = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return self._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {self._ownerNode = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var expiration: Org_Xrpl_Rpc_V1_Expiration {
    get {return _expiration ?? Org_Xrpl_Rpc_V1_Expiration()}
    set {_expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  public var hasExpiration: Bool {return self._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  public mutating func clearExpiration() {self._expiration = nil}

  public var cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter {
    get {return _cancelAfter ?? Org_Xrpl_Rpc_V1_CancelAfter()}
    set {_cancelAfter = newValue}
  }
  /// Returns true if `cancelAfter` has been explicitly set.
  public var hasCancelAfter: Bool {return self._cancelAfter != nil}
  /// Clears the value of `cancelAfter`. Subsequent reads from it will return its default value.
  public mutating func clearCancelAfter() {self._cancelAfter = nil}

  public var sourceTag: Org_Xrpl_Rpc_V1_SourceTag {
    get {return _sourceTag ?? Org_Xrpl_Rpc_V1_SourceTag()}
    set {_sourceTag = newValue}
  }
  /// Returns true if `sourceTag` has been explicitly set.
  public var hasSourceTag: Bool {return self._sourceTag != nil}
  /// Clears the value of `sourceTag`. Subsequent reads from it will return its default value.
  public mutating func clearSourceTag() {self._sourceTag = nil}

  public var destinationTag: Org_Xrpl_Rpc_V1_DestinationTag {
    get {return _destinationTag ?? Org_Xrpl_Rpc_V1_DestinationTag()}
    set {_destinationTag = newValue}
  }
  /// Returns true if `destinationTag` has been explicitly set.
  public var hasDestinationTag: Bool {return self._destinationTag != nil}
  /// Clears the value of `destinationTag`. Subsequent reads from it will return its default value.
  public mutating func clearDestinationTag() {self._destinationTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _account: Org_Xrpl_Rpc_V1_Account? = nil
  fileprivate var _destination: Org_Xrpl_Rpc_V1_Destination? = nil
  fileprivate var _amount: Org_Xrpl_Rpc_V1_Amount? = nil
  fileprivate var _balance: Org_Xrpl_Rpc_V1_Balance? = nil
  fileprivate var _publicKey: Org_Xrpl_Rpc_V1_PublicKey? = nil
  fileprivate var _settleDelay: Org_Xrpl_Rpc_V1_SettleDelay? = nil
  fileprivate var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _expiration: Org_Xrpl_Rpc_V1_Expiration? = nil
  fileprivate var _cancelAfter: Org_Xrpl_Rpc_V1_CancelAfter? = nil
  fileprivate var _sourceTag: Org_Xrpl_Rpc_V1_SourceTag? = nil
  fileprivate var _destinationTag: Org_Xrpl_Rpc_V1_DestinationTag? = nil
}

/// Next field: 13
public struct Org_Xrpl_Rpc_V1_RippleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var balance: Org_Xrpl_Rpc_V1_Balance {
    get {return _balance ?? Org_Xrpl_Rpc_V1_Balance()}
    set {_balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool {return self._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() {self._balance = nil}

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var lowLimit: Org_Xrpl_Rpc_V1_LowLimit {
    get {return _lowLimit ?? Org_Xrpl_Rpc_V1_LowLimit()}
    set {_lowLimit = newValue}
  }
  /// Returns true if `lowLimit` has been explicitly set.
  public var hasLowLimit: Bool {return self._lowLimit != nil}
  /// Clears the value of `lowLimit`. Subsequent reads from it will return its default value.
  public mutating func clearLowLimit() {self._lowLimit = nil}

  public var highLimit: Org_Xrpl_Rpc_V1_HighLimit {
    get {return _highLimit ?? Org_Xrpl_Rpc_V1_HighLimit()}
    set {_highLimit = newValue}
  }
  /// Returns true if `highLimit` has been explicitly set.
  public var hasHighLimit: Bool {return self._highLimit != nil}
  /// Clears the value of `highLimit`. Subsequent reads from it will return its default value.
  public mutating func clearHighLimit() {self._highLimit = nil}

  public var lowNode: Org_Xrpl_Rpc_V1_LowNode {
    get {return _lowNode ?? Org_Xrpl_Rpc_V1_LowNode()}
    set {_lowNode = newValue}
  }
  /// Returns true if `lowNode` has been explicitly set.
  public var hasLowNode: Bool {return self._lowNode != nil}
  /// Clears the value of `lowNode`. Subsequent reads from it will return its default value.
  public mutating func clearLowNode() {self._lowNode = nil}

  public var highNode: Org_Xrpl_Rpc_V1_HighNode {
    get {return _highNode ?? Org_Xrpl_Rpc_V1_HighNode()}
    set {_highNode = newValue}
  }
  /// Returns true if `highNode` has been explicitly set.
  public var hasHighNode: Bool {return self._highNode != nil}
  /// Clears the value of `highNode`. Subsequent reads from it will return its default value.
  public mutating func clearHighNode() {self._highNode = nil}

  public var lowQualityIn: Org_Xrpl_Rpc_V1_LowQualityIn {
    get {return _lowQualityIn ?? Org_Xrpl_Rpc_V1_LowQualityIn()}
    set {_lowQualityIn = newValue}
  }
  /// Returns true if `lowQualityIn` has been explicitly set.
  public var hasLowQualityIn: Bool {return self._lowQualityIn != nil}
  /// Clears the value of `lowQualityIn`. Subsequent reads from it will return its default value.
  public mutating func clearLowQualityIn() {self._lowQualityIn = nil}

  public var lowQualityOut: Org_Xrpl_Rpc_V1_LowQualityOut {
    get {return _lowQualityOut ?? Org_Xrpl_Rpc_V1_LowQualityOut()}
    set {_lowQualityOut = newValue}
  }
  /// Returns true if `lowQualityOut` has been explicitly set.
  public var hasLowQualityOut: Bool {return self._lowQualityOut != nil}
  /// Clears the value of `lowQualityOut`. Subsequent reads from it will return its default value.
  public mutating func clearLowQualityOut() {self._lowQualityOut = nil}

  public var highQualityIn: Org_Xrpl_Rpc_V1_HighQualityIn {
    get {return _highQualityIn ?? Org_Xrpl_Rpc_V1_HighQualityIn()}
    set {_highQualityIn = newValue}
  }
  /// Returns true if `highQualityIn` has been explicitly set.
  public var hasHighQualityIn: Bool {return self._highQualityIn != nil}
  /// Clears the value of `highQualityIn`. Subsequent reads from it will return its default value.
  public mutating func clearHighQualityIn() {self._highQualityIn = nil}

  public var highQualityOut: Org_Xrpl_Rpc_V1_HighQualityOut {
    get {return _highQualityOut ?? Org_Xrpl_Rpc_V1_HighQualityOut()}
    set {_highQualityOut = newValue}
  }
  /// Returns true if `highQualityOut` has been explicitly set.
  public var hasHighQualityOut: Bool {return self._highQualityOut != nil}
  /// Clears the value of `highQualityOut`. Subsequent reads from it will return its default value.
  public mutating func clearHighQualityOut() {self._highQualityOut = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _balance: Org_Xrpl_Rpc_V1_Balance? = nil
  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _lowLimit: Org_Xrpl_Rpc_V1_LowLimit? = nil
  fileprivate var _highLimit: Org_Xrpl_Rpc_V1_HighLimit? = nil
  fileprivate var _lowNode: Org_Xrpl_Rpc_V1_LowNode? = nil
  fileprivate var _highNode: Org_Xrpl_Rpc_V1_HighNode? = nil
  fileprivate var _lowQualityIn: Org_Xrpl_Rpc_V1_LowQualityIn? = nil
  fileprivate var _lowQualityOut: Org_Xrpl_Rpc_V1_LowQualityOut? = nil
  fileprivate var _highQualityIn: Org_Xrpl_Rpc_V1_HighQualityIn? = nil
  fileprivate var _highQualityOut: Org_Xrpl_Rpc_V1_HighQualityOut? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
}

/// Next field: 8
public struct Org_Xrpl_Rpc_V1_SignerList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: Org_Xrpl_Rpc_V1_Flags {
    get {return _flags ?? Org_Xrpl_Rpc_V1_Flags()}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {self._flags = nil}

  public var previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID {
    get {return _previousTransactionID ?? Org_Xrpl_Rpc_V1_PreviousTransactionID()}
    set {_previousTransactionID = newValue}
  }
  /// Returns true if `previousTransactionID` has been explicitly set.
  public var hasPreviousTransactionID: Bool {return self._previousTransactionID != nil}
  /// Clears the value of `previousTransactionID`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionID() {self._previousTransactionID = nil}

  public var previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence {
    get {return _previousTransactionLedgerSequence ?? Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence()}
    set {_previousTransactionLedgerSequence = newValue}
  }
  /// Returns true if `previousTransactionLedgerSequence` has been explicitly set.
  public var hasPreviousTransactionLedgerSequence: Bool {return self._previousTransactionLedgerSequence != nil}
  /// Clears the value of `previousTransactionLedgerSequence`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousTransactionLedgerSequence() {self._previousTransactionLedgerSequence = nil}

  public var ownerNode: Org_Xrpl_Rpc_V1_OwnerNode {
    get {return _ownerNode ?? Org_Xrpl_Rpc_V1_OwnerNode()}
    set {_ownerNode = newValue}
  }
  /// Returns true if `ownerNode` has been explicitly set.
  public var hasOwnerNode: Bool {return self._ownerNode != nil}
  /// Clears the value of `ownerNode`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNode() {self._ownerNode = nil}

  public var signerEntries: [Org_Xrpl_Rpc_V1_SignerEntry] = []

  public var signerListID: Org_Xrpl_Rpc_V1_SignerListID {
    get {return _signerListID ?? Org_Xrpl_Rpc_V1_SignerListID()}
    set {_signerListID = newValue}
  }
  /// Returns true if `signerListID` has been explicitly set.
  public var hasSignerListID: Bool {return self._signerListID != nil}
  /// Clears the value of `signerListID`. Subsequent reads from it will return its default value.
  public mutating func clearSignerListID() {self._signerListID = nil}

  public var signerQuorum: Org_Xrpl_Rpc_V1_SignerQuorum {
    get {return _signerQuorum ?? Org_Xrpl_Rpc_V1_SignerQuorum()}
    set {_signerQuorum = newValue}
  }
  /// Returns true if `signerQuorum` has been explicitly set.
  public var hasSignerQuorum: Bool {return self._signerQuorum != nil}
  /// Clears the value of `signerQuorum`. Subsequent reads from it will return its default value.
  public mutating func clearSignerQuorum() {self._signerQuorum = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _flags: Org_Xrpl_Rpc_V1_Flags? = nil
  fileprivate var _previousTransactionID: Org_Xrpl_Rpc_V1_PreviousTransactionID? = nil
  fileprivate var _previousTransactionLedgerSequence: Org_Xrpl_Rpc_V1_PreviousTransactionLedgerSequence? = nil
  fileprivate var _ownerNode: Org_Xrpl_Rpc_V1_OwnerNode? = nil
  fileprivate var _signerListID: Org_Xrpl_Rpc_V1_SignerListID? = nil
  fileprivate var _signerQuorum: Org_Xrpl_Rpc_V1_SignerQuorum? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.xrpl.rpc.v1"

extension Org_Xrpl_Rpc_V1_LedgerEntryType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEDGER_ENTRY_TYPE_UNSPECIFIED"),
    1: .same(proto: "LEDGER_ENTRY_TYPE_ACCOUNT_ROOT"),
    2: .same(proto: "LEDGER_ENTRY_TYPE_AMENDMENTS"),
    3: .same(proto: "LEDGER_ENTRY_TYPE_CHECK"),
    4: .same(proto: "LEDGER_ENTRY_TYPE_DEPOSIT_PREAUTH"),
    5: .same(proto: "LEDGER_ENTRY_TYPE_DIRECTORY_NODE"),
    6: .same(proto: "LEDGER_ENTRY_TYPE_ESCROW"),
    7: .same(proto: "LEDGER_ENTRY_TYPE_FEE_SETTINGS"),
    8: .same(proto: "LEDGER_ENTRY_TYPE_LEDGER_HASHES"),
    9: .same(proto: "LEDGER_ENTRY_TYPE_OFFER"),
    10: .same(proto: "LEDGER_ENTRY_TYPE_PAY_CHANNEL"),
    11: .same(proto: "LEDGER_ENTRY_TYPE_RIPPLE_STATE"),
    12: .same(proto: "LEDGER_ENTRY_TYPE_SIGNER_LIST"),
  ]
}

extension Org_Xrpl_Rpc_V1_LedgerObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LedgerObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_root"),
    2: .same(proto: "amendments"),
    3: .same(proto: "check"),
    4: .standard(proto: "deposit_preauth"),
    5: .standard(proto: "directory_node"),
    6: .same(proto: "escrow"),
    7: .standard(proto: "fee_settings"),
    8: .standard(proto: "ledger_hashes"),
    9: .same(proto: "offer"),
    10: .standard(proto: "pay_channel"),
    11: .standard(proto: "ripple_state"),
    12: .standard(proto: "signer_list"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Org_Xrpl_Rpc_V1_AccountRoot?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .accountRoot(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .accountRoot(v)}
      case 2:
        var v: Org_Xrpl_Rpc_V1_Amendments?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .amendments(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .amendments(v)}
      case 3:
        var v: Org_Xrpl_Rpc_V1_Check?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .check(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .check(v)}
      case 4:
        var v: Org_Xrpl_Rpc_V1_DepositPreauthObject?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .depositPreauth(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .depositPreauth(v)}
      case 5:
        var v: Org_Xrpl_Rpc_V1_DirectoryNode?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .directoryNode(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .directoryNode(v)}
      case 6:
        var v: Org_Xrpl_Rpc_V1_Escrow?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .escrow(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .escrow(v)}
      case 7:
        var v: Org_Xrpl_Rpc_V1_FeeSettings?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .feeSettings(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .feeSettings(v)}
      case 8:
        var v: Org_Xrpl_Rpc_V1_LedgerHashes?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .ledgerHashes(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .ledgerHashes(v)}
      case 9:
        var v: Org_Xrpl_Rpc_V1_Offer?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .offer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .offer(v)}
      case 10:
        var v: Org_Xrpl_Rpc_V1_PayChannel?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .payChannel(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .payChannel(v)}
      case 11:
        var v: Org_Xrpl_Rpc_V1_RippleState?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .rippleState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .rippleState(v)}
      case 12:
        var v: Org_Xrpl_Rpc_V1_SignerList?
        if let current = self.object {
          try decoder.handleConflictingOneOf()
          if case .signerList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.object = .signerList(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.object {
    case .accountRoot(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .amendments(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .check(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .depositPreauth(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .directoryNode(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case .escrow(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    case .feeSettings(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    case .ledgerHashes(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    case .offer(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    case .payChannel(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .rippleState(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    case .signerList(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_LedgerObject, rhs: Org_Xrpl_Rpc_V1_LedgerObject) -> Bool {
    if lhs.object != rhs.object {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_AccountRoot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountRoot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "balance"),
    3: .same(proto: "sequence"),
    4: .same(proto: "flags"),
    5: .standard(proto: "owner_count"),
    6: .standard(proto: "previous_transaction_id"),
    7: .standard(proto: "previous_transaction_ledger_sequence"),
    8: .standard(proto: "account_transaction_id"),
    9: .same(proto: "domain"),
    10: .standard(proto: "email_hash"),
    11: .standard(proto: "message_key"),
    12: .standard(proto: "regular_key"),
    13: .standard(proto: "tick_size"),
    14: .standard(proto: "transfer_rate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularMessageField(value: &self._balance)
      case 3: try decoder.decodeSingularMessageField(value: &self._sequence)
      case 4: try decoder.decodeSingularMessageField(value: &self._flags)
      case 5: try decoder.decodeSingularMessageField(value: &self._ownerCount)
      case 6: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 7: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      case 8: try decoder.decodeSingularMessageField(value: &self._accountTransactionID)
      case 9: try decoder.decodeSingularMessageField(value: &self._domain)
      case 10: try decoder.decodeSingularMessageField(value: &self._emailHash)
      case 11: try decoder.decodeSingularMessageField(value: &self._messageKey)
      case 12: try decoder.decodeSingularMessageField(value: &self._regularKey)
      case 13: try decoder.decodeSingularMessageField(value: &self._tickSize)
      case 14: try decoder.decodeSingularMessageField(value: &self._transferRate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._sequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._ownerCount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._accountTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._domain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._emailHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._messageKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._regularKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._tickSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._transferRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_AccountRoot, rhs: Org_Xrpl_Rpc_V1_AccountRoot) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs._balance != rhs._balance {return false}
    if lhs._sequence != rhs._sequence {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._ownerCount != rhs._ownerCount {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs._accountTransactionID != rhs._accountTransactionID {return false}
    if lhs._domain != rhs._domain {return false}
    if lhs._emailHash != rhs._emailHash {return false}
    if lhs._messageKey != rhs._messageKey {return false}
    if lhs._regularKey != rhs._regularKey {return false}
    if lhs._tickSize != rhs._tickSize {return false}
    if lhs._transferRate != rhs._transferRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Amendments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Amendments"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amendments"),
    2: .same(proto: "majorities"),
    3: .same(proto: "flags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.amendments)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.majorities)
      case 3: try decoder.decodeSingularMessageField(value: &self._flags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amendments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amendments, fieldNumber: 1)
    }
    if !self.majorities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.majorities, fieldNumber: 2)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Amendments, rhs: Org_Xrpl_Rpc_V1_Amendments) -> Bool {
    if lhs.amendments != rhs.amendments {return false}
    if lhs.majorities != rhs.majorities {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Amendments.Amendment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Org_Xrpl_Rpc_V1_Amendments.protoMessageName + ".Amendment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Amendments.Amendment, rhs: Org_Xrpl_Rpc_V1_Amendments.Amendment) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Amendments.Majority: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Org_Xrpl_Rpc_V1_Amendments.protoMessageName + ".Majority"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amendment"),
    2: .standard(proto: "close_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._amendment)
      case 2: try decoder.decodeSingularMessageField(value: &self._closeTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._amendment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._closeTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Amendments.Majority, rhs: Org_Xrpl_Rpc_V1_Amendments.Majority) -> Bool {
    if lhs._amendment != rhs._amendment {return false}
    if lhs._closeTime != rhs._closeTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Check: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Check"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "destination"),
    3: .same(proto: "flags"),
    4: .standard(proto: "owner_node"),
    5: .standard(proto: "previous_transaction_id"),
    6: .standard(proto: "previous_transaction_ledger_sequence"),
    7: .standard(proto: "send_max"),
    8: .same(proto: "sequence"),
    9: .standard(proto: "destination_node"),
    10: .standard(proto: "destination_tag"),
    11: .same(proto: "expiration"),
    12: .standard(proto: "invoice_id"),
    13: .standard(proto: "source_tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularMessageField(value: &self._destination)
      case 3: try decoder.decodeSingularMessageField(value: &self._flags)
      case 4: try decoder.decodeSingularMessageField(value: &self._ownerNode)
      case 5: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 6: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      case 7: try decoder.decodeSingularMessageField(value: &self._sendMax)
      case 8: try decoder.decodeSingularMessageField(value: &self._sequence)
      case 9: try decoder.decodeSingularMessageField(value: &self._destinationNode)
      case 10: try decoder.decodeSingularMessageField(value: &self._destinationTag)
      case 11: try decoder.decodeSingularMessageField(value: &self._expiration)
      case 12: try decoder.decodeSingularMessageField(value: &self._invoiceID)
      case 13: try decoder.decodeSingularMessageField(value: &self._sourceTag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._ownerNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._sendMax {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._sequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._destinationNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._destinationTag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._expiration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._invoiceID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._sourceTag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Check, rhs: Org_Xrpl_Rpc_V1_Check) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._ownerNode != rhs._ownerNode {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs._sendMax != rhs._sendMax {return false}
    if lhs._sequence != rhs._sequence {return false}
    if lhs._destinationNode != rhs._destinationNode {return false}
    if lhs._destinationTag != rhs._destinationTag {return false}
    if lhs._expiration != rhs._expiration {return false}
    if lhs._invoiceID != rhs._invoiceID {return false}
    if lhs._sourceTag != rhs._sourceTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_DepositPreauthObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DepositPreauthObject"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "authorize"),
    3: .same(proto: "flags"),
    4: .standard(proto: "owner_node"),
    5: .standard(proto: "previous_transaction_id"),
    6: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularMessageField(value: &self._authorize)
      case 3: try decoder.decodeSingularMessageField(value: &self._flags)
      case 4: try decoder.decodeSingularMessageField(value: &self._ownerNode)
      case 5: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 6: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._authorize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._ownerNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_DepositPreauthObject, rhs: Org_Xrpl_Rpc_V1_DepositPreauthObject) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs._authorize != rhs._authorize {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._ownerNode != rhs._ownerNode {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_DirectoryNode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DirectoryNode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "root_index"),
    3: .same(proto: "indexes"),
    4: .standard(proto: "index_next"),
    5: .standard(proto: "index_previous"),
    6: .same(proto: "owner"),
    7: .standard(proto: "taker_pays_currency"),
    8: .standard(proto: "taker_pays_issuer"),
    9: .standard(proto: "taker_gets_currency"),
    10: .standard(proto: "taker_gets_issuer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._flags)
      case 2: try decoder.decodeSingularMessageField(value: &self._rootIndex)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.indexes)
      case 4: try decoder.decodeSingularMessageField(value: &self._indexNext)
      case 5: try decoder.decodeSingularMessageField(value: &self._indexPrevious)
      case 6: try decoder.decodeSingularMessageField(value: &self._owner)
      case 7: try decoder.decodeSingularMessageField(value: &self._takerPaysCurrency)
      case 8: try decoder.decodeSingularMessageField(value: &self._takerPaysIssuer)
      case 9: try decoder.decodeSingularMessageField(value: &self._takerGetsCurrency)
      case 10: try decoder.decodeSingularMessageField(value: &self._takerGetsIssuer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._rootIndex {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.indexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.indexes, fieldNumber: 3)
    }
    if let v = self._indexNext {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._indexPrevious {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._takerPaysCurrency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._takerPaysIssuer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._takerGetsCurrency {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._takerGetsIssuer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_DirectoryNode, rhs: Org_Xrpl_Rpc_V1_DirectoryNode) -> Bool {
    if lhs._flags != rhs._flags {return false}
    if lhs._rootIndex != rhs._rootIndex {return false}
    if lhs.indexes != rhs.indexes {return false}
    if lhs._indexNext != rhs._indexNext {return false}
    if lhs._indexPrevious != rhs._indexPrevious {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs._takerPaysCurrency != rhs._takerPaysCurrency {return false}
    if lhs._takerPaysIssuer != rhs._takerPaysIssuer {return false}
    if lhs._takerGetsCurrency != rhs._takerGetsCurrency {return false}
    if lhs._takerGetsIssuer != rhs._takerGetsIssuer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Escrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Escrow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "destination"),
    3: .same(proto: "amount"),
    4: .same(proto: "condition"),
    5: .standard(proto: "cancel_after"),
    6: .standard(proto: "finish_after"),
    7: .same(proto: "flags"),
    8: .standard(proto: "source_tag"),
    9: .standard(proto: "destination_tag"),
    10: .standard(proto: "owner_node"),
    11: .standard(proto: "destination_node"),
    12: .standard(proto: "previous_transaction_id"),
    13: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularMessageField(value: &self._destination)
      case 3: try decoder.decodeSingularMessageField(value: &self._amount)
      case 4: try decoder.decodeSingularMessageField(value: &self._condition)
      case 5: try decoder.decodeSingularMessageField(value: &self._cancelAfter)
      case 6: try decoder.decodeSingularMessageField(value: &self._finishAfter)
      case 7: try decoder.decodeSingularMessageField(value: &self._flags)
      case 8: try decoder.decodeSingularMessageField(value: &self._sourceTag)
      case 9: try decoder.decodeSingularMessageField(value: &self._destinationTag)
      case 10: try decoder.decodeSingularMessageField(value: &self._ownerNode)
      case 11: try decoder.decodeSingularMessageField(value: &self._destinationNode)
      case 12: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 13: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._condition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._cancelAfter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._finishAfter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._sourceTag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._destinationTag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._ownerNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._destinationNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Escrow, rhs: Org_Xrpl_Rpc_V1_Escrow) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._condition != rhs._condition {return false}
    if lhs._cancelAfter != rhs._cancelAfter {return false}
    if lhs._finishAfter != rhs._finishAfter {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._sourceTag != rhs._sourceTag {return false}
    if lhs._destinationTag != rhs._destinationTag {return false}
    if lhs._ownerNode != rhs._ownerNode {return false}
    if lhs._destinationNode != rhs._destinationNode {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_FeeSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeeSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_fee"),
    2: .standard(proto: "reference_fee_units"),
    3: .standard(proto: "reserve_base"),
    4: .standard(proto: "reserve_increment"),
    5: .same(proto: "flags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._baseFee)
      case 2: try decoder.decodeSingularMessageField(value: &self._referenceFeeUnits)
      case 3: try decoder.decodeSingularMessageField(value: &self._reserveBase)
      case 4: try decoder.decodeSingularMessageField(value: &self._reserveIncrement)
      case 5: try decoder.decodeSingularMessageField(value: &self._flags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._referenceFeeUnits {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._reserveBase {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._reserveIncrement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_FeeSettings, rhs: Org_Xrpl_Rpc_V1_FeeSettings) -> Bool {
    if lhs._baseFee != rhs._baseFee {return false}
    if lhs._referenceFeeUnits != rhs._referenceFeeUnits {return false}
    if lhs._reserveBase != rhs._reserveBase {return false}
    if lhs._reserveIncrement != rhs._reserveIncrement {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_LedgerHashes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LedgerHashes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_ledger_sequence"),
    2: .same(proto: "hashes"),
    3: .same(proto: "flags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lastLedgerSequence)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.hashes)
      case 3: try decoder.decodeSingularMessageField(value: &self._flags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lastLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.hashes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hashes, fieldNumber: 2)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_LedgerHashes, rhs: Org_Xrpl_Rpc_V1_LedgerHashes) -> Bool {
    if lhs._lastLedgerSequence != rhs._lastLedgerSequence {return false}
    if lhs.hashes != rhs.hashes {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Offer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Offer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "sequence"),
    3: .same(proto: "flags"),
    4: .standard(proto: "taker_pays"),
    5: .standard(proto: "taker_gets"),
    6: .standard(proto: "book_directory"),
    7: .standard(proto: "book_node"),
    8: .standard(proto: "owner_node"),
    9: .same(proto: "expiration"),
    10: .standard(proto: "previous_transaction_id"),
    11: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularMessageField(value: &self._sequence)
      case 3: try decoder.decodeSingularMessageField(value: &self._flags)
      case 4: try decoder.decodeSingularMessageField(value: &self._takerPays)
      case 5: try decoder.decodeSingularMessageField(value: &self._takerGets)
      case 6: try decoder.decodeSingularMessageField(value: &self._bookDirectory)
      case 7: try decoder.decodeSingularMessageField(value: &self._bookNode)
      case 8: try decoder.decodeSingularMessageField(value: &self._ownerNode)
      case 9: try decoder.decodeSingularMessageField(value: &self._expiration)
      case 10: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 11: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._sequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._takerPays {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._takerGets {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._bookDirectory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._bookNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._ownerNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._expiration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Offer, rhs: Org_Xrpl_Rpc_V1_Offer) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs._sequence != rhs._sequence {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._takerPays != rhs._takerPays {return false}
    if lhs._takerGets != rhs._takerGets {return false}
    if lhs._bookDirectory != rhs._bookDirectory {return false}
    if lhs._bookNode != rhs._bookNode {return false}
    if lhs._ownerNode != rhs._ownerNode {return false}
    if lhs._expiration != rhs._expiration {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_PayChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PayChannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "destination"),
    3: .same(proto: "amount"),
    4: .same(proto: "balance"),
    5: .standard(proto: "public_key"),
    6: .standard(proto: "settle_delay"),
    7: .standard(proto: "owner_node"),
    8: .standard(proto: "previous_transaction_id"),
    9: .standard(proto: "previous_transaction_ledger_sequence"),
    10: .same(proto: "flags"),
    11: .same(proto: "expiration"),
    12: .standard(proto: "cancel_after"),
    13: .standard(proto: "source_tag"),
    14: .standard(proto: "destination_tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._account)
      case 2: try decoder.decodeSingularMessageField(value: &self._destination)
      case 3: try decoder.decodeSingularMessageField(value: &self._amount)
      case 4: try decoder.decodeSingularMessageField(value: &self._balance)
      case 5: try decoder.decodeSingularMessageField(value: &self._publicKey)
      case 6: try decoder.decodeSingularMessageField(value: &self._settleDelay)
      case 7: try decoder.decodeSingularMessageField(value: &self._ownerNode)
      case 8: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 9: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      case 10: try decoder.decodeSingularMessageField(value: &self._flags)
      case 11: try decoder.decodeSingularMessageField(value: &self._expiration)
      case 12: try decoder.decodeSingularMessageField(value: &self._cancelAfter)
      case 13: try decoder.decodeSingularMessageField(value: &self._sourceTag)
      case 14: try decoder.decodeSingularMessageField(value: &self._destinationTag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._publicKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._settleDelay {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._ownerNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._expiration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._cancelAfter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    if let v = self._sourceTag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }
    if let v = self._destinationTag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_PayChannel, rhs: Org_Xrpl_Rpc_V1_PayChannel) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._balance != rhs._balance {return false}
    if lhs._publicKey != rhs._publicKey {return false}
    if lhs._settleDelay != rhs._settleDelay {return false}
    if lhs._ownerNode != rhs._ownerNode {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._expiration != rhs._expiration {return false}
    if lhs._cancelAfter != rhs._cancelAfter {return false}
    if lhs._sourceTag != rhs._sourceTag {return false}
    if lhs._destinationTag != rhs._destinationTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_RippleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RippleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "balance"),
    2: .same(proto: "flags"),
    3: .standard(proto: "low_limit"),
    4: .standard(proto: "high_limit"),
    5: .standard(proto: "low_node"),
    6: .standard(proto: "high_node"),
    7: .standard(proto: "low_quality_in"),
    8: .standard(proto: "low_quality_out"),
    9: .standard(proto: "high_quality_in"),
    10: .standard(proto: "high_quality_out"),
    11: .standard(proto: "previous_transaction_id"),
    12: .standard(proto: "previous_transaction_ledger_sequence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._balance)
      case 2: try decoder.decodeSingularMessageField(value: &self._flags)
      case 3: try decoder.decodeSingularMessageField(value: &self._lowLimit)
      case 4: try decoder.decodeSingularMessageField(value: &self._highLimit)
      case 5: try decoder.decodeSingularMessageField(value: &self._lowNode)
      case 6: try decoder.decodeSingularMessageField(value: &self._highNode)
      case 7: try decoder.decodeSingularMessageField(value: &self._lowQualityIn)
      case 8: try decoder.decodeSingularMessageField(value: &self._lowQualityOut)
      case 9: try decoder.decodeSingularMessageField(value: &self._highQualityIn)
      case 10: try decoder.decodeSingularMessageField(value: &self._highQualityOut)
      case 11: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 12: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lowLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._highLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._lowNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._highNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._lowQualityIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._lowQualityOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._highQualityIn {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if let v = self._highQualityOut {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_RippleState, rhs: Org_Xrpl_Rpc_V1_RippleState) -> Bool {
    if lhs._balance != rhs._balance {return false}
    if lhs._flags != rhs._flags {return false}
    if lhs._lowLimit != rhs._lowLimit {return false}
    if lhs._highLimit != rhs._highLimit {return false}
    if lhs._lowNode != rhs._lowNode {return false}
    if lhs._highNode != rhs._highNode {return false}
    if lhs._lowQualityIn != rhs._lowQualityIn {return false}
    if lhs._lowQualityOut != rhs._lowQualityOut {return false}
    if lhs._highQualityIn != rhs._highQualityIn {return false}
    if lhs._highQualityOut != rhs._highQualityOut {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_SignerList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignerList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .standard(proto: "previous_transaction_id"),
    3: .standard(proto: "previous_transaction_ledger_sequence"),
    4: .standard(proto: "owner_node"),
    5: .standard(proto: "signer_entries"),
    6: .standard(proto: "signer_list_id"),
    7: .standard(proto: "signer_quorum"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._flags)
      case 2: try decoder.decodeSingularMessageField(value: &self._previousTransactionID)
      case 3: try decoder.decodeSingularMessageField(value: &self._previousTransactionLedgerSequence)
      case 4: try decoder.decodeSingularMessageField(value: &self._ownerNode)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.signerEntries)
      case 6: try decoder.decodeSingularMessageField(value: &self._signerListID)
      case 7: try decoder.decodeSingularMessageField(value: &self._signerQuorum)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._flags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._previousTransactionID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._previousTransactionLedgerSequence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._ownerNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.signerEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signerEntries, fieldNumber: 5)
    }
    if let v = self._signerListID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._signerQuorum {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_SignerList, rhs: Org_Xrpl_Rpc_V1_SignerList) -> Bool {
    if lhs._flags != rhs._flags {return false}
    if lhs._previousTransactionID != rhs._previousTransactionID {return false}
    if lhs._previousTransactionLedgerSequence != rhs._previousTransactionLedgerSequence {return false}
    if lhs._ownerNode != rhs._ownerNode {return false}
    if lhs.signerEntries != rhs.signerEntries {return false}
    if lhs._signerListID != rhs._signerListID {return false}
    if lhs._signerQuorum != rhs._signerQuorum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
