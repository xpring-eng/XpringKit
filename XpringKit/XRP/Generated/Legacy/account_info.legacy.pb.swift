// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: account_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about an account on the ledger.
/// Next field: 6
public struct Io_Xpring_AccountInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The account's current XRP balance.
  public var balance: Io_Xpring_XRPAmount {
    get { return _balance ?? Io_Xpring_XRPAmount() }
    set { _balance = newValue }
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool { return self._balance != nil }
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() { self._balance = nil }

  /// The sequence number of the next valid transaction for this account.
  public var sequence: UInt64 = 0

  /// The number of objects this account owns in the ledger, which contributes to its owner reserve.
  public var ownerCount: UInt64 = 0

  /// The identifying hash of the transaction that most recently modified this object.
  public var previousAffectingTransactionID: String = String()

  /// 	The index of the ledger that contains the transaction that most recently modified this object.
  public var previousAffectingTransactionLedgerVersion: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _balance: Io_Xpring_XRPAmount?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "io.xpring"

extension Io_Xpring_AccountInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "balance"),
    2: .same(proto: "sequence"),
    3: .standard(proto: "owner_count"),
    4: .standard(proto: "previous_affecting_transaction_id"),
    5: .standard(proto: "previous_affecting_transaction_ledger_version")
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._balance)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.sequence)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.ownerCount)
      case 4: try decoder.decodeSingularStringField(value: &self.previousAffectingTransactionID)
      case 5: try decoder.decodeSingularUInt64Field(value: &self.previousAffectingTransactionLedgerVersion)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 2)
    }
    if self.ownerCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.ownerCount, fieldNumber: 3)
    }
    if !self.previousAffectingTransactionID.isEmpty {
      try visitor.visitSingularStringField(value: self.previousAffectingTransactionID, fieldNumber: 4)
    }
    if self.previousAffectingTransactionLedgerVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.previousAffectingTransactionLedgerVersion, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Xpring_AccountInfo, rhs: Io_Xpring_AccountInfo) -> Bool {
    if lhs._balance != rhs._balance { return false }
    if lhs.sequence != rhs.sequence { return false }
    if lhs.ownerCount != rhs.ownerCount { return false }
    if lhs.previousAffectingTransactionID != rhs.previousAffectingTransactionID { return false }
    if lhs.previousAffectingTransactionLedgerVersion != rhs.previousAffectingTransactionLedgerVersion { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}
