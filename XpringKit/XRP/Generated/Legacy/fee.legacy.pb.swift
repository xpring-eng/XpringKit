// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: fee.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A fee to submit a transaction to the XRP Ledger.
/// Next field: 2
public struct Io_Xpring_Fee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The amount of the fee.
  public var amount: Io_Xpring_XRPAmount {
    get { return _amount ?? Io_Xpring_XRPAmount() }
    set { _amount = newValue }
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool { return self._amount != nil }
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() { self._amount = nil }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _amount: Io_Xpring_XRPAmount?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "io.xpring"

extension Io_Xpring_Fee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount")
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Xpring_Fee, rhs: Io_Xpring_Fee) -> Bool {
    if lhs._amount != rhs._amount { return false }
    if lhs.unknownFields != rhs.unknownFields { return false }
    return true
  }
}
