// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: get_balance_response.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Return fields of a balance request
public struct Org_Interledger_Stream_Proto_GetBalanceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: String = String()

  public var assetCode: String = String()

  public var assetScale: Int32 = 0

  public var netBalance: Int64 = 0

  public var prepaidAmount: Int64 = 0

  public var clearingBalance: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.interledger.stream.proto"

extension Org_Interledger_Stream_Proto_GetBalanceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetBalanceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "asset_code"),
    3: .standard(proto: "asset_scale"),
    4: .standard(proto: "net_balance"),
    5: .standard(proto: "prepaid_amount"),
    6: .standard(proto: "clearing_balance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.accountID)
      case 2: try decoder.decodeSingularStringField(value: &self.assetCode)
      case 3: try decoder.decodeSingularInt32Field(value: &self.assetScale)
      case 4: try decoder.decodeSingularInt64Field(value: &self.netBalance)
      case 5: try decoder.decodeSingularInt64Field(value: &self.prepaidAmount)
      case 6: try decoder.decodeSingularInt64Field(value: &self.clearingBalance)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountID, fieldNumber: 1)
    }
    if !self.assetCode.isEmpty {
      try visitor.visitSingularStringField(value: self.assetCode, fieldNumber: 2)
    }
    if self.assetScale != 0 {
      try visitor.visitSingularInt32Field(value: self.assetScale, fieldNumber: 3)
    }
    if self.netBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.netBalance, fieldNumber: 4)
    }
    if self.prepaidAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.prepaidAmount, fieldNumber: 5)
    }
    if self.clearingBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.clearingBalance, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Interledger_Stream_Proto_GetBalanceResponse, rhs: Org_Interledger_Stream_Proto_GetBalanceResponse) -> Bool {
    if lhs.accountID != rhs.accountID {return false}
    if lhs.assetCode != rhs.assetCode {return false}
    if lhs.assetScale != rhs.assetScale {return false}
    if lhs.netBalance != rhs.netBalance {return false}
    if lhs.prepaidAmount != rhs.prepaidAmount {return false}
    if lhs.clearingBalance != rhs.clearingBalance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
