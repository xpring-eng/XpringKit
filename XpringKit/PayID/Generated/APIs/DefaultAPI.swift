//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import Foundation

open class DefaultAPI {
    /**
     get-invoice

     - parameter path: (path)  
     - parameter nonce: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPathInvoice(path: String, nonce: String, completion: @escaping ((_ data: SignatureWrapperInvoice?, _ error: Error?) -> Void)) {
        getPathInvoiceWithRequestBuilder(path: path, nonce: nonce).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     get-invoice
     - GET /{path}/invoice
     - 

     - examples: [{contentType=application/json, example={
  "messageType" : "messageType",
  "signature" : "signature",
  "publicKeyData" : [ "publicKeyData", "publicKeyData" ],
  "publicKey" : "publicKey",
  "message" : {
    "expirationTime" : "expirationTime",
    "memo" : "memo",
    "paymentInformation" : {
      "paymentPointer" : "paymentPointer",
      "addressDetailsType" : "addressDetailsType",
      "addressDetails" : {
        "address" : "address",
        "tag" : "tag"
      },
      "proof_of_control_signature" : "proof_of_control_signature"
    },
    "complianceHashes" : [ {
      "type" : "type",
      "hash" : "hash"
    }, {
      "type" : "type",
      "hash" : "hash"
    } ],
    "nonce" : "nonce",
    "complianceRequirements" : [ "complianceRequirements", "complianceRequirements" ]
  },
  "publicKeyType" : "publicKeyType"
}}]
     - parameter path: (path)  
     - parameter nonce: (query)  

     - returns: RequestBuilder<SignatureWrapperInvoice> 
     */
    open class func getPathInvoiceWithRequestBuilder(path: String, nonce: String) -> RequestBuilder<SignatureWrapperInvoice> {
        var path = "/{path}/invoice"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "nonce": nonce
        ])

        let requestBuilder: RequestBuilder<SignatureWrapperInvoice>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     post-invoice

     - parameter path: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPathInvoice(path: String, body: SignatureWrapperInvoice? = nil, completion: @escaping ((_ data: SignatureWrapperCompliance?, _ error: Error?) -> Void)) {
        postPathInvoiceWithRequestBuilder(path: path, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     post-invoice
     - POST /{path}/invoice
     - 

     - examples: [{contentType=application/json, example={
  "messageType" : "messageType",
  "signature" : "signature",
  "publicKeyData" : [ "publicKeyData", "publicKeyData" ],
  "publicKey" : "publicKey",
  "message" : {
    "data" : {
      "beneficiary" : {
        "accountId" : "accountId",
        "institutionName" : "institutionName",
        "userPhysicalAddress" : "userPhysicalAddress",
        "userLegalName" : "userLegalName"
      },
      "originator" : {
        "accountId" : "accountId",
        "institutionName" : "institutionName",
        "userPhysicalAddress" : "userPhysicalAddress",
        "userLegalName" : "userLegalName",
        "value" : {
          "amount" : "amount",
          "scale" : "scale"
        },
        "timestamp" : "timestamp"
      }
    },
    "type" : "type"
  },
  "publicKeyType" : "publicKeyType"
}}]
     - parameter path: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<SignatureWrapperCompliance> 
     */
    open class func postPathInvoiceWithRequestBuilder(path: String, body: SignatureWrapperInvoice? = nil) -> RequestBuilder<SignatureWrapperCompliance> {
        var path = "/{path}/invoice"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SignatureWrapperCompliance>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter path: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPathReceipt(path: String, body: Receipt? = nil, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        postPathReceiptWithRequestBuilder(path: path, body: body).execute { (_, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     - POST /{path}/receipt
     - 

     - parameter path: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postPathReceiptWithRequestBuilder(path: String, body: Receipt? = nil) -> RequestBuilder<Void> {
        var path = "/{path}/receipt"
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     get-pay-id

     - parameter host: (path)  
     - parameter path: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resolvePayID(host: String, path: String, completion: @escaping ((_ data: PaymentInformation?, _ error: Error?) -> Void)) {
        resolvePayIDWithRequestBuilder(host: host, path: path).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     get-pay-id
     - GET /{host}/{path}

     - examples: [{contentType=application/json, example={
  "paymentPointer" : "paymentPointer",
  "addressDetailsType" : "addressDetailsType",
  "addressDetails" : {
    "address" : "address",
    "tag" : "tag"
  },
  "proof_of_control_signature" : "proof_of_control_signature"
}}]
     - parameter host: (path)  
     - parameter path: (path)  

     - returns: RequestBuilder<PaymentInformation> 
     */
    open class func resolvePayIDWithRequestBuilder(host: String, path: String) -> RequestBuilder<PaymentInformation> {
        var path = "/{host}/{path}"
        let hostPreEscape = "\(host)"
        let hostPostEscape = hostPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{host}", with: hostPostEscape, options: .literal, range: nil)
        let pathPreEscape = "\(path)"
        let pathPostEscape = pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{path}", with: pathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PaymentInformation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
