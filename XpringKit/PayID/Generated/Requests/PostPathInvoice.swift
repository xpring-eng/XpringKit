//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API {

    /** post-invoice */
    public enum PostPathInvoice {

        public static let service = APIService<Response>(id: "post-path-invoice", tag: "", method: "POST", path: "/{path}/invoice", hasBody: true)

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var path: String

                public init(path: String) {
                    self.path = path
                }
            }

            public var options: Options

            public var body: SignatureWrapperInvoice?

            public init(body: SignatureWrapperInvoice?, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: PostPathInvoice.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(path: String, body: SignatureWrapperInvoice? = nil) {
                let options = Options(path: path)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "path" + "}", with: "\(self.options.path)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = SignatureWrapperCompliance

            /** OK */
            case status200(SignatureWrapperCompliance)

            /** Bad Request */
            case status400

            /** Not Found */
            case status404

            /** Request Entity Too Large */
            case status413

            /** Unprocessable Entity */
            case status422

            /** Unavailable due to legal reasons */
            case status451

            /** Service Unavailable */
            case status503

            public var success: SignatureWrapperCompliance? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status404: return 404
                case .status413: return 413
                case .status422: return 422
                case .status451: return 451
                case .status503: return 503
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status404: return false
                case .status413: return false
                case .status422: return false
                case .status451: return false
                case .status503: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(SignatureWrapperCompliance.self, from: data))
                case 400: self = .status400
                case 404: self = .status404
                case 413: self = .status413
                case 422: self = .status422
                case 451: self = .status451
                case 503: self = .status503
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
