//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API {

    /** get-invoice */
    public enum GetPathInvoice {

        public static let service = APIService<Response>(id: "get-path-invoice", tag: "", method: "GET", path: "/{path}/invoice", hasBody: false)

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var path: String

                public var nonce: String

                public init(path: String, nonce: String) {
                    self.path = path
                    self.nonce = nonce
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetPathInvoice.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(path: String, nonce: String) {
                let options = Options(path: path, nonce: nonce)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "path" + "}", with: "\(self.options.path)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["nonce"] = options.nonce
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = SignatureWrapperInvoice

            /** OK */
            case status200(SignatureWrapperInvoice)

            /** Not Found */
            case status404

            /** Service Unavailable */
            case status503

            public var success: SignatureWrapperInvoice? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status404: return 404
                case .status503: return 503
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status404: return false
                case .status503: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(SignatureWrapperInvoice.self, from: data))
                case 404: self = .status404
                case 503: self = .status503
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
