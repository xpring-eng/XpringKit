// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: rpc/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Rpc_V1_GetTxRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hash of the transaction. 32 bytes
  public var hash: Data = SwiftProtobuf.Internal.emptyData

  /// if true, return data in binary format
  public var binary: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Rpc_V1_GetTxResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The actual transaction
  public var serializedTransaction: OneOf_SerializedTransaction? {
    get {return _storage._serializedTransaction}
    set {_uniqueStorage()._serializedTransaction = newValue}
  }

  public var transaction: Rpc_V1_Transaction {
    get {
      if case .transaction(let v)? = _storage._serializedTransaction {return v}
      return Rpc_V1_Transaction()
    }
    set {_uniqueStorage()._serializedTransaction = .transaction(newValue)}
  }

  /// Variable length
  public var transactionBinary: Data {
    get {
      if case .transactionBinary(let v)? = _storage._serializedTransaction {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._serializedTransaction = .transactionBinary(newValue)}
  }

  /// Sequence number of ledger that contains this transaction
  public var ledgerIndex: UInt32 {
    get {return _storage._ledgerIndex}
    set {_uniqueStorage()._ledgerIndex = newValue}
  }

  /// 32 bytes
  public var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  /// whether the ledger has been validated
  public var validated: Bool {
    get {return _storage._validated}
    set {_uniqueStorage()._validated = newValue}
  }

  /// metadata about the transaction
  public var serializedMeta: OneOf_SerializedMeta? {
    get {return _storage._serializedMeta}
    set {_uniqueStorage()._serializedMeta = newValue}
  }

  public var meta: Rpc_V1_Meta {
    get {
      if case .meta(let v)? = _storage._serializedMeta {return v}
      return Rpc_V1_Meta()
    }
    set {_uniqueStorage()._serializedMeta = .meta(newValue)}
  }

  /// Variable length
  public var metaBinary: Data {
    get {
      if case .metaBinary(let v)? = _storage._serializedMeta {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._serializedMeta = .metaBinary(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The actual transaction
  public enum OneOf_SerializedTransaction: Equatable {
    case transaction(Rpc_V1_Transaction)
    /// Variable length
    case transactionBinary(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Rpc_V1_GetTxResponse.OneOf_SerializedTransaction, rhs: Rpc_V1_GetTxResponse.OneOf_SerializedTransaction) -> Bool {
      switch (lhs, rhs) {
      case (.transaction(let l), .transaction(let r)): return l == r
      case (.transactionBinary(let l), .transactionBinary(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// metadata about the transaction
  public enum OneOf_SerializedMeta: Equatable {
    case meta(Rpc_V1_Meta)
    /// Variable length
    case metaBinary(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Rpc_V1_GetTxResponse.OneOf_SerializedMeta, rhs: Rpc_V1_GetTxResponse.OneOf_SerializedMeta) -> Bool {
      switch (lhs, rhs) {
      case (.meta(let l), .meta(let r)): return l == r
      case (.metaBinary(let l), .metaBinary(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "rpc.v1"

extension Rpc_V1_GetTxRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTxRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "binary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.hash)
      case 2: try decoder.decodeSingularBoolField(value: &self.binary)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 1)
    }
    if self.binary != false {
      try visitor.visitSingularBoolField(value: self.binary, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rpc_V1_GetTxRequest, rhs: Rpc_V1_GetTxRequest) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.binary != rhs.binary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Rpc_V1_GetTxResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTxResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .standard(proto: "transaction_binary"),
    3: .standard(proto: "ledger_index"),
    4: .same(proto: "hash"),
    5: .same(proto: "validated"),
    6: .same(proto: "meta"),
    7: .standard(proto: "meta_binary"),
  ]

  fileprivate class _StorageClass {
    var _serializedTransaction: Rpc_V1_GetTxResponse.OneOf_SerializedTransaction?
    var _ledgerIndex: UInt32 = 0
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _validated: Bool = false
    var _serializedMeta: Rpc_V1_GetTxResponse.OneOf_SerializedMeta?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serializedTransaction = source._serializedTransaction
      _ledgerIndex = source._ledgerIndex
      _hash = source._hash
      _validated = source._validated
      _serializedMeta = source._serializedMeta
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Rpc_V1_Transaction?
          if let current = _storage._serializedTransaction {
            try decoder.handleConflictingOneOf()
            if case .transaction(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._serializedTransaction = .transaction(v)}
        case 2:
          if _storage._serializedTransaction != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._serializedTransaction = .transactionBinary(v)}
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._ledgerIndex)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._validated)
        case 6:
          var v: Rpc_V1_Meta?
          if let current = _storage._serializedMeta {
            try decoder.handleConflictingOneOf()
            if case .meta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._serializedMeta = .meta(v)}
        case 7:
          if _storage._serializedMeta != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._serializedMeta = .metaBinary(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._serializedTransaction {
      case .transaction(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .transactionBinary(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      case nil: break
      }
      if _storage._ledgerIndex != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._ledgerIndex, fieldNumber: 3)
      }
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 4)
      }
      if _storage._validated != false {
        try visitor.visitSingularBoolField(value: _storage._validated, fieldNumber: 5)
      }
      switch _storage._serializedMeta {
      case .meta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .metaBinary(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Rpc_V1_GetTxResponse, rhs: Rpc_V1_GetTxResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serializedTransaction != rhs_storage._serializedTransaction {return false}
        if _storage._ledgerIndex != rhs_storage._ledgerIndex {return false}
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._validated != rhs_storage._validated {return false}
        if _storage._serializedMeta != rhs_storage._serializedMeta {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
