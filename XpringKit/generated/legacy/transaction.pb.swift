// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: transaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A class encompassing all transactions.
/// Next field: 7.
public struct Io_Xpring_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The account originating the transaction.
  public var account: String {
    get {return _storage._account}
    set {_uniqueStorage()._account = newValue}
  }

  /// The fee attached to the transaction.
  public var fee: Io_Xpring_XRPAmount {
    get {return _storage._fee ?? Io_Xpring_XRPAmount()}
    set {_uniqueStorage()._fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return _storage._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {_uniqueStorage()._fee = nil}

  /// The sequence number for the transaction.
  public var sequence: UInt64 {
    get {return _storage._sequence}
    set {_uniqueStorage()._sequence = newValue}
  }

  /// Data specific to a the type of transaction being submitted.
  public var transactionData: OneOf_TransactionData? {
    get {return _storage._transactionData}
    set {_uniqueStorage()._transactionData = newValue}
  }

  public var payment: Io_Xpring_Payment {
    get {
      if case .payment(let v)? = _storage._transactionData {return v}
      return Io_Xpring_Payment()
    }
    set {_uniqueStorage()._transactionData = .payment(newValue)}
  }

  /// The public key of the account which signed the transaction in hexadecimal.
  public var signingPublicKeyHex: String {
    get {return _storage._signingPublicKeyHex}
    set {_uniqueStorage()._signingPublicKeyHex = newValue}
  }

  /// The highest ledger index this transaction can appear in.
  public var lastLedgerSequence: UInt32 {
    get {return _storage._lastLedgerSequence}
    set {_uniqueStorage()._lastLedgerSequence = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Data specific to a the type of transaction being submitted.
  public enum OneOf_TransactionData: Equatable {
    case payment(Io_Xpring_Payment)

  #if !swift(>=4.1)
    public static func ==(lhs: Io_Xpring_Transaction.OneOf_TransactionData, rhs: Io_Xpring_Transaction.OneOf_TransactionData) -> Bool {
      switch (lhs, rhs) {
      case (.payment(let l), .payment(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "io.xpring"

extension Io_Xpring_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "fee"),
    3: .same(proto: "sequence"),
    4: .same(proto: "payment"),
    5: .standard(proto: "signing_public_key_hex"),
    6: .standard(proto: "last_ledger_sequence"),
  ]

  fileprivate class _StorageClass {
    var _account: String = String()
    var _fee: Io_Xpring_XRPAmount? = nil
    var _sequence: UInt64 = 0
    var _transactionData: Io_Xpring_Transaction.OneOf_TransactionData?
    var _signingPublicKeyHex: String = String()
    var _lastLedgerSequence: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _fee = source._fee
      _sequence = source._sequence
      _transactionData = source._transactionData
      _signingPublicKeyHex = source._signingPublicKeyHex
      _lastLedgerSequence = source._lastLedgerSequence
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._fee)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._sequence)
        case 4:
          var v: Io_Xpring_Payment?
          if let current = _storage._transactionData {
            try decoder.handleConflictingOneOf()
            if case .payment(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._transactionData = .payment(v)}
        case 5: try decoder.decodeSingularStringField(value: &_storage._signingPublicKeyHex)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._lastLedgerSequence)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._account.isEmpty {
        try visitor.visitSingularStringField(value: _storage._account, fieldNumber: 1)
      }
      if let v = _storage._fee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._sequence != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._sequence, fieldNumber: 3)
      }
      if case .payment(let v)? = _storage._transactionData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._signingPublicKeyHex.isEmpty {
        try visitor.visitSingularStringField(value: _storage._signingPublicKeyHex, fieldNumber: 5)
      }
      if _storage._lastLedgerSequence != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lastLedgerSequence, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Xpring_Transaction, rhs: Io_Xpring_Transaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._transactionData != rhs_storage._transactionData {return false}
        if _storage._signingPublicKeyHex != rhs_storage._signingPublicKeyHex {return false}
        if _storage._lastLedgerSequence != rhs_storage._lastLedgerSequence {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
