// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: account_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about an account on the ledger.
/// Next field: 6
public struct Io_Xpring_AccountInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The account's current XRP balance.
  public var balance: Io_Xpring_XRPAmount {
    get {return _storage._balance ?? Io_Xpring_XRPAmount()}
    set {_uniqueStorage()._balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  public var hasBalance: Bool {return _storage._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  public mutating func clearBalance() {_uniqueStorage()._balance = nil}

  /// The sequence number of the next valid transaction for this account.
  public var sequence: UInt64 {
    get {return _storage._sequence}
    set {_uniqueStorage()._sequence = newValue}
  }

  /// The number of objects this account owns in the ledger, which contributes to its owner reserve.
  public var ownerCount: UInt64 {
    get {return _storage._ownerCount}
    set {_uniqueStorage()._ownerCount = newValue}
  }

  /// The identifying hash of the transaction that most recently modified this object.
  public var previousAffectingTransactionID: String {
    get {return _storage._previousAffectingTransactionID}
    set {_uniqueStorage()._previousAffectingTransactionID = newValue}
  }

  /// 	The index of the ledger that contains the transaction that most recently modified this object.
  public var previousAffectingTransactionLedgerVersion: UInt64 {
    get {return _storage._previousAffectingTransactionLedgerVersion}
    set {_uniqueStorage()._previousAffectingTransactionLedgerVersion = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "io.xpring"

extension Io_Xpring_AccountInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "balance"),
    2: .same(proto: "sequence"),
    3: .standard(proto: "owner_count"),
    4: .standard(proto: "previous_affecting_transaction_id"),
    5: .standard(proto: "previous_affecting_transaction_ledger_version"),
  ]

  fileprivate class _StorageClass {
    var _balance: Io_Xpring_XRPAmount? = nil
    var _sequence: UInt64 = 0
    var _ownerCount: UInt64 = 0
    var _previousAffectingTransactionID: String = String()
    var _previousAffectingTransactionLedgerVersion: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _balance = source._balance
      _sequence = source._sequence
      _ownerCount = source._ownerCount
      _previousAffectingTransactionID = source._previousAffectingTransactionID
      _previousAffectingTransactionLedgerVersion = source._previousAffectingTransactionLedgerVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._balance)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._sequence)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._ownerCount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._previousAffectingTransactionID)
        case 5: try decoder.decodeSingularUInt64Field(value: &_storage._previousAffectingTransactionLedgerVersion)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._balance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._sequence != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._sequence, fieldNumber: 2)
      }
      if _storage._ownerCount != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._ownerCount, fieldNumber: 3)
      }
      if !_storage._previousAffectingTransactionID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._previousAffectingTransactionID, fieldNumber: 4)
      }
      if _storage._previousAffectingTransactionLedgerVersion != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._previousAffectingTransactionLedgerVersion, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Xpring_AccountInfo, rhs: Io_Xpring_AccountInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._balance != rhs_storage._balance {return false}
        if _storage._sequence != rhs_storage._sequence {return false}
        if _storage._ownerCount != rhs_storage._ownerCount {return false}
        if _storage._previousAffectingTransactionID != rhs_storage._previousAffectingTransactionID {return false}
        if _storage._previousAffectingTransactionLedgerVersion != rhs_storage._previousAffectingTransactionLedgerVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
