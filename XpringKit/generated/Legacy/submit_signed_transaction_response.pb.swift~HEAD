// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: submit_signed_transaction_response.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A response when a signed transaction is submitted to the ledger.
/// Next field: 5
public struct Io_Xpring_SubmitSignedTransactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Code indicating the preliminary result of the transaction.
  public var engineResult: String = String()

  /// Numeric code indicating the preliminary result of the transaction, directly correlated to engine_result.
  public var engineResultCode: Int64 = 0

  /// Human-readable explanation of the transaction's preliminary result.
  public var engineResultMessage: String = String()

  /// The complete transaction in hex string format
  public var transactionBlob: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "io.xpring"

extension Io_Xpring_SubmitSignedTransactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitSignedTransactionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "engine_result"),
    2: .standard(proto: "engine_result_code"),
    3: .standard(proto: "engine_result_message"),
    4: .standard(proto: "transaction_blob"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.engineResult)
      case 2: try decoder.decodeSingularInt64Field(value: &self.engineResultCode)
      case 3: try decoder.decodeSingularStringField(value: &self.engineResultMessage)
      case 4: try decoder.decodeSingularStringField(value: &self.transactionBlob)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engineResult.isEmpty {
      try visitor.visitSingularStringField(value: self.engineResult, fieldNumber: 1)
    }
    if self.engineResultCode != 0 {
      try visitor.visitSingularInt64Field(value: self.engineResultCode, fieldNumber: 2)
    }
    if !self.engineResultMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.engineResultMessage, fieldNumber: 3)
    }
    if !self.transactionBlob.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionBlob, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Io_Xpring_SubmitSignedTransactionResponse, rhs: Io_Xpring_SubmitSignedTransactionResponse) -> Bool {
    if lhs.engineResult != rhs.engineResult {return false}
    if lhs.engineResultCode != rhs.engineResultCode {return false}
    if lhs.engineResultMessage != rhs.engineResultMessage {return false}
    if lhs.transactionBlob != rhs.transactionBlob {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
