// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/get_transaction.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Next field: 4
public struct Org_Xrpl_Rpc_V1_GetTransactionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hash of the transaction. 32 bytes
  /// ATTN: this is in binary, not hex. The JSON API accepts a hex string for
  /// a transaction hash, but here we need that hex string converted into its
  /// binary form. Each pair of hex characters should be converted into its
  /// corresponding byte. For example, the 4 character hex string "00FF"
  /// should be converted to a 2 byte array: [0, 255]
  public var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  /// if true, return data in binary format. defaults to false
  public var binary: Bool {
    get {return _storage._binary}
    set {_uniqueStorage()._binary = newValue}
  }

  /// search only specified range. optional
  public var ledgerRange: Org_Xrpl_Rpc_V1_LedgerRange {
    get {return _storage._ledgerRange ?? Org_Xrpl_Rpc_V1_LedgerRange()}
    set {_uniqueStorage()._ledgerRange = newValue}
  }
  /// Returns true if `ledgerRange` has been explicitly set.
  public var hasLedgerRange: Bool {return _storage._ledgerRange != nil}
  /// Clears the value of `ledgerRange`. Subsequent reads from it will return its default value.
  public mutating func clearLedgerRange() {_uniqueStorage()._ledgerRange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 9
public struct Org_Xrpl_Rpc_V1_GetTransactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var serializedTransaction: OneOf_SerializedTransaction? {
    get {return _storage._serializedTransaction}
    set {_uniqueStorage()._serializedTransaction = newValue}
  }

  public var transaction: Org_Xrpl_Rpc_V1_Transaction {
    get {
      if case .transaction(let v)? = _storage._serializedTransaction {return v}
      return Org_Xrpl_Rpc_V1_Transaction()
    }
    set {_uniqueStorage()._serializedTransaction = .transaction(newValue)}
  }

  /// Variable length
  public var transactionBinary: Data {
    get {
      if case .transactionBinary(let v)? = _storage._serializedTransaction {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._serializedTransaction = .transactionBinary(newValue)}
  }

  /// Sequence number of ledger that contains this transaction
  public var ledgerIndex: UInt32 {
    get {return _storage._ledgerIndex}
    set {_uniqueStorage()._ledgerIndex = newValue}
  }

  /// 32 bytes
  public var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  /// whether the ledger has been validated
  public var validated: Bool {
    get {return _storage._validated}
    set {_uniqueStorage()._validated = newValue}
  }

  /// metadata about the transaction
  public var serializedMeta: OneOf_SerializedMeta? {
    get {return _storage._serializedMeta}
    set {_uniqueStorage()._serializedMeta = newValue}
  }

  public var meta: Org_Xrpl_Rpc_V1_Meta {
    get {
      if case .meta(let v)? = _storage._serializedMeta {return v}
      return Org_Xrpl_Rpc_V1_Meta()
    }
    set {_uniqueStorage()._serializedMeta = .meta(newValue)}
  }

  /// Variable length
  public var metaBinary: Data {
    get {
      if case .metaBinary(let v)? = _storage._serializedMeta {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._serializedMeta = .metaBinary(newValue)}
  }

  public var date: Org_Xrpl_Rpc_V1_Date {
    get {return _storage._date ?? Org_Xrpl_Rpc_V1_Date()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {_uniqueStorage()._date = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_SerializedTransaction: Equatable {
    case transaction(Org_Xrpl_Rpc_V1_Transaction)
    /// Variable length
    case transactionBinary(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedTransaction, rhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedTransaction) -> Bool {
      switch (lhs, rhs) {
      case (.transaction(let l), .transaction(let r)): return l == r
      case (.transactionBinary(let l), .transactionBinary(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// metadata about the transaction
  public enum OneOf_SerializedMeta: Equatable {
    case meta(Org_Xrpl_Rpc_V1_Meta)
    /// Variable length
    case metaBinary(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedMeta, rhs: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedMeta) -> Bool {
      switch (lhs, rhs) {
      case (.meta(let l), .meta(let r)): return l == r
      case (.metaBinary(let l), .metaBinary(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.xrpl.rpc.v1"

extension Org_Xrpl_Rpc_V1_GetTransactionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTransactionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "binary"),
    3: .standard(proto: "ledger_range"),
  ]

  fileprivate class _StorageClass {
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _binary: Bool = false
    var _ledgerRange: Org_Xrpl_Rpc_V1_LedgerRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hash = source._hash
      _binary = source._binary
      _ledgerRange = source._ledgerRange
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._binary)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._ledgerRange)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 1)
      }
      if _storage._binary != false {
        try visitor.visitSingularBoolField(value: _storage._binary, fieldNumber: 2)
      }
      if let v = _storage._ledgerRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionRequest, rhs: Org_Xrpl_Rpc_V1_GetTransactionRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._binary != rhs_storage._binary {return false}
        if _storage._ledgerRange != rhs_storage._ledgerRange {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_GetTransactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetTransactionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .standard(proto: "transaction_binary"),
    3: .standard(proto: "ledger_index"),
    4: .same(proto: "hash"),
    5: .same(proto: "validated"),
    6: .same(proto: "meta"),
    7: .standard(proto: "meta_binary"),
    8: .same(proto: "date"),
  ]

  fileprivate class _StorageClass {
    var _serializedTransaction: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedTransaction?
    var _ledgerIndex: UInt32 = 0
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _validated: Bool = false
    var _serializedMeta: Org_Xrpl_Rpc_V1_GetTransactionResponse.OneOf_SerializedMeta?
    var _date: Org_Xrpl_Rpc_V1_Date? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serializedTransaction = source._serializedTransaction
      _ledgerIndex = source._ledgerIndex
      _hash = source._hash
      _validated = source._validated
      _serializedMeta = source._serializedMeta
      _date = source._date
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Org_Xrpl_Rpc_V1_Transaction?
          if let current = _storage._serializedTransaction {
            try decoder.handleConflictingOneOf()
            if case .transaction(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._serializedTransaction = .transaction(v)}
        case 2:
          if _storage._serializedTransaction != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._serializedTransaction = .transactionBinary(v)}
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._ledgerIndex)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._validated)
        case 6:
          var v: Org_Xrpl_Rpc_V1_Meta?
          if let current = _storage._serializedMeta {
            try decoder.handleConflictingOneOf()
            if case .meta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._serializedMeta = .meta(v)}
        case 7:
          if _storage._serializedMeta != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._serializedMeta = .metaBinary(v)}
        case 8: try decoder.decodeSingularMessageField(value: &_storage._date)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._serializedTransaction {
      case .transaction(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .transactionBinary(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      case nil: break
      }
      if _storage._ledgerIndex != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._ledgerIndex, fieldNumber: 3)
      }
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 4)
      }
      if _storage._validated != false {
        try visitor.visitSingularBoolField(value: _storage._validated, fieldNumber: 5)
      }
      switch _storage._serializedMeta {
      case .meta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .metaBinary(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
      case nil: break
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetTransactionResponse, rhs: Org_Xrpl_Rpc_V1_GetTransactionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serializedTransaction != rhs_storage._serializedTransaction {return false}
        if _storage._ledgerIndex != rhs_storage._ledgerIndex {return false}
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._validated != rhs_storage._validated {return false}
        if _storage._serializedMeta != rhs_storage._serializedMeta {return false}
        if _storage._date != rhs_storage._date {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
