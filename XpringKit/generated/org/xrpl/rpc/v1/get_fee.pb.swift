// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: org/xrpl/rpc/v1/get_fee.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A request for the current transaction fee on the ledger.
/// Next field: 1
public struct Org_Xrpl_Rpc_V1_GetFeeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response to a GetFee RPC
/// Next field: 8
public struct Org_Xrpl_Rpc_V1_GetFeeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var currentLedgerSize: UInt64 {
    get {return _storage._currentLedgerSize}
    set {_uniqueStorage()._currentLedgerSize = newValue}
  }

  public var currentQueueSize: UInt64 {
    get {return _storage._currentQueueSize}
    set {_uniqueStorage()._currentQueueSize = newValue}
  }

  public var fee: Org_Xrpl_Rpc_V1_Fee {
    get {return _storage._fee ?? Org_Xrpl_Rpc_V1_Fee()}
    set {_uniqueStorage()._fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return _storage._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {_uniqueStorage()._fee = nil}

  public var expectedLedgerSize: UInt64 {
    get {return _storage._expectedLedgerSize}
    set {_uniqueStorage()._expectedLedgerSize = newValue}
  }

  public var ledgerCurrentIndex: UInt32 {
    get {return _storage._ledgerCurrentIndex}
    set {_uniqueStorage()._ledgerCurrentIndex = newValue}
  }

  public var levels: Org_Xrpl_Rpc_V1_FeeLevels {
    get {return _storage._levels ?? Org_Xrpl_Rpc_V1_FeeLevels()}
    set {_uniqueStorage()._levels = newValue}
  }
  /// Returns true if `levels` has been explicitly set.
  public var hasLevels: Bool {return _storage._levels != nil}
  /// Clears the value of `levels`. Subsequent reads from it will return its default value.
  public mutating func clearLevels() {_uniqueStorage()._levels = nil}

  public var maxQueueSize: UInt64 {
    get {return _storage._maxQueueSize}
    set {_uniqueStorage()._maxQueueSize = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 5
public struct Org_Xrpl_Rpc_V1_Fee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var baseFee: Org_Xrpl_Rpc_V1_XRPDropsAmount {
    get {return _storage._baseFee ?? Org_Xrpl_Rpc_V1_XRPDropsAmount()}
    set {_uniqueStorage()._baseFee = newValue}
  }
  /// Returns true if `baseFee` has been explicitly set.
  public var hasBaseFee: Bool {return _storage._baseFee != nil}
  /// Clears the value of `baseFee`. Subsequent reads from it will return its default value.
  public mutating func clearBaseFee() {_uniqueStorage()._baseFee = nil}

  public var medianFee: Org_Xrpl_Rpc_V1_XRPDropsAmount {
    get {return _storage._medianFee ?? Org_Xrpl_Rpc_V1_XRPDropsAmount()}
    set {_uniqueStorage()._medianFee = newValue}
  }
  /// Returns true if `medianFee` has been explicitly set.
  public var hasMedianFee: Bool {return _storage._medianFee != nil}
  /// Clears the value of `medianFee`. Subsequent reads from it will return its default value.
  public mutating func clearMedianFee() {_uniqueStorage()._medianFee = nil}

  public var minimumFee: Org_Xrpl_Rpc_V1_XRPDropsAmount {
    get {return _storage._minimumFee ?? Org_Xrpl_Rpc_V1_XRPDropsAmount()}
    set {_uniqueStorage()._minimumFee = newValue}
  }
  /// Returns true if `minimumFee` has been explicitly set.
  public var hasMinimumFee: Bool {return _storage._minimumFee != nil}
  /// Clears the value of `minimumFee`. Subsequent reads from it will return its default value.
  public mutating func clearMinimumFee() {_uniqueStorage()._minimumFee = nil}

  public var openLedgerFee: Org_Xrpl_Rpc_V1_XRPDropsAmount {
    get {return _storage._openLedgerFee ?? Org_Xrpl_Rpc_V1_XRPDropsAmount()}
    set {_uniqueStorage()._openLedgerFee = newValue}
  }
  /// Returns true if `openLedgerFee` has been explicitly set.
  public var hasOpenLedgerFee: Bool {return _storage._openLedgerFee != nil}
  /// Clears the value of `openLedgerFee`. Subsequent reads from it will return its default value.
  public mutating func clearOpenLedgerFee() {_uniqueStorage()._openLedgerFee = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Next field: 5
public struct Org_Xrpl_Rpc_V1_FeeLevels {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var medianLevel: UInt64 = 0

  public var minimumLevel: UInt64 = 0

  public var openLedgerLevel: UInt64 = 0

  public var referenceLevel: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "org.xrpl.rpc.v1"

extension Org_Xrpl_Rpc_V1_GetFeeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFeeRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetFeeRequest, rhs: Org_Xrpl_Rpc_V1_GetFeeRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_GetFeeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFeeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "current_ledger_size"),
    2: .standard(proto: "current_queue_size"),
    3: .same(proto: "fee"),
    4: .standard(proto: "expected_ledger_size"),
    5: .standard(proto: "ledger_current_index"),
    6: .same(proto: "levels"),
    7: .standard(proto: "max_queue_size"),
  ]

  fileprivate class _StorageClass {
    var _currentLedgerSize: UInt64 = 0
    var _currentQueueSize: UInt64 = 0
    var _fee: Org_Xrpl_Rpc_V1_Fee? = nil
    var _expectedLedgerSize: UInt64 = 0
    var _ledgerCurrentIndex: UInt32 = 0
    var _levels: Org_Xrpl_Rpc_V1_FeeLevels? = nil
    var _maxQueueSize: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _currentLedgerSize = source._currentLedgerSize
      _currentQueueSize = source._currentQueueSize
      _fee = source._fee
      _expectedLedgerSize = source._expectedLedgerSize
      _ledgerCurrentIndex = source._ledgerCurrentIndex
      _levels = source._levels
      _maxQueueSize = source._maxQueueSize
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._currentLedgerSize)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._currentQueueSize)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._fee)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._expectedLedgerSize)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._ledgerCurrentIndex)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._levels)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._maxQueueSize)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._currentLedgerSize != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._currentLedgerSize, fieldNumber: 1)
      }
      if _storage._currentQueueSize != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._currentQueueSize, fieldNumber: 2)
      }
      if let v = _storage._fee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._expectedLedgerSize != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._expectedLedgerSize, fieldNumber: 4)
      }
      if _storage._ledgerCurrentIndex != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._ledgerCurrentIndex, fieldNumber: 5)
      }
      if let v = _storage._levels {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._maxQueueSize != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._maxQueueSize, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_GetFeeResponse, rhs: Org_Xrpl_Rpc_V1_GetFeeResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._currentLedgerSize != rhs_storage._currentLedgerSize {return false}
        if _storage._currentQueueSize != rhs_storage._currentQueueSize {return false}
        if _storage._fee != rhs_storage._fee {return false}
        if _storage._expectedLedgerSize != rhs_storage._expectedLedgerSize {return false}
        if _storage._ledgerCurrentIndex != rhs_storage._ledgerCurrentIndex {return false}
        if _storage._levels != rhs_storage._levels {return false}
        if _storage._maxQueueSize != rhs_storage._maxQueueSize {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_Fee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_fee"),
    2: .standard(proto: "median_fee"),
    3: .standard(proto: "minimum_fee"),
    4: .standard(proto: "open_ledger_fee"),
  ]

  fileprivate class _StorageClass {
    var _baseFee: Org_Xrpl_Rpc_V1_XRPDropsAmount? = nil
    var _medianFee: Org_Xrpl_Rpc_V1_XRPDropsAmount? = nil
    var _minimumFee: Org_Xrpl_Rpc_V1_XRPDropsAmount? = nil
    var _openLedgerFee: Org_Xrpl_Rpc_V1_XRPDropsAmount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseFee = source._baseFee
      _medianFee = source._medianFee
      _minimumFee = source._minimumFee
      _openLedgerFee = source._openLedgerFee
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._baseFee)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._medianFee)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._minimumFee)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._openLedgerFee)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._baseFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._medianFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._minimumFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._openLedgerFee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_Fee, rhs: Org_Xrpl_Rpc_V1_Fee) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseFee != rhs_storage._baseFee {return false}
        if _storage._medianFee != rhs_storage._medianFee {return false}
        if _storage._minimumFee != rhs_storage._minimumFee {return false}
        if _storage._openLedgerFee != rhs_storage._openLedgerFee {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Org_Xrpl_Rpc_V1_FeeLevels: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeeLevels"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "median_level"),
    2: .standard(proto: "minimum_level"),
    3: .standard(proto: "open_ledger_level"),
    4: .standard(proto: "reference_level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.medianLevel)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.minimumLevel)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.openLedgerLevel)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.referenceLevel)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.medianLevel != 0 {
      try visitor.visitSingularUInt64Field(value: self.medianLevel, fieldNumber: 1)
    }
    if self.minimumLevel != 0 {
      try visitor.visitSingularUInt64Field(value: self.minimumLevel, fieldNumber: 2)
    }
    if self.openLedgerLevel != 0 {
      try visitor.visitSingularUInt64Field(value: self.openLedgerLevel, fieldNumber: 3)
    }
    if self.referenceLevel != 0 {
      try visitor.visitSingularUInt64Field(value: self.referenceLevel, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Org_Xrpl_Rpc_V1_FeeLevels, rhs: Org_Xrpl_Rpc_V1_FeeLevels) -> Bool {
    if lhs.medianLevel != rhs.medianLevel {return false}
    if lhs.minimumLevel != rhs.minimumLevel {return false}
    if lhs.openLedgerLevel != rhs.openLedgerLevel {return false}
    if lhs.referenceLevel != rhs.referenceLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
